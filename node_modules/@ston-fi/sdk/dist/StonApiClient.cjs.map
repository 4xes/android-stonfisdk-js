{"version":3,"file":"StonApiClient.cjs","sources":["../src/StonApiClient.ts"],"sourcesContent":["import TonWeb from \"tonweb\";\n\nimport type { StonApiClient as IStonApiClient } from \"@/types\";\n\nconst {\n  HttpProvider,\n  Address,\n  token: {\n    jetton: { JettonMinter },\n  },\n} = TonWeb;\n\n/**\n * This is an implementation of the StonApiClient needed for SDK to work\n * that use TON API via TonWeb http provider instead of Ston.fi public API\n */\nexport class StonApiClient implements IStonApiClient {\n  protected readonly tonApiProvider;\n\n  constructor(tonApiProvider: InstanceType<typeof HttpProvider>) {\n    this.tonApiProvider = tonApiProvider;\n  }\n\n  async getJettonWalletAddress({\n    jettonAddress,\n    ownerAddress,\n  }: { jettonAddress: string; ownerAddress: string }) {\n    const jettonMinter = new JettonMinter(\n      this.tonApiProvider,\n      // @ts-expect-error - not all parameters are really required here\n      {\n        address: jettonAddress,\n      },\n    );\n    const walletAddress = await jettonMinter.getJettonWalletAddress(\n      new Address(ownerAddress),\n    );\n\n    return walletAddress.toString();\n  }\n}\n"],"names":["HttpProvider","Address","JettonMinter","TonWeb","StonApiClient","tonApiProvider","jettonAddress","ownerAddress"],"mappings":"0GAIM,CACJ,aAAAA,EACA,QAAAC,EACA,MAAO,CACL,OAAQ,CAAE,aAAAC,CAAa,CACzB,CACF,EAAIC,EAMG,MAAMC,CAAwC,CAGnD,YAAYC,EAAmD,CAC7D,KAAK,eAAiBA,CACxB,CAEA,MAAM,uBAAuB,CAC3B,cAAAC,EACA,aAAAC,CAAA,EACkD,CAYlD,OAJsB,MAPD,IAAIL,EACvB,KAAK,eAEL,CACE,QAASI,CACX,CAAA,EAEuC,uBACvC,IAAIL,EAAQM,CAAY,CAAA,GAGL,UACvB,CACF"}