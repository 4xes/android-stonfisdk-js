{"version":3,"file":"StonApiClient.js","sources":["../src/StonApiClient.ts"],"sourcesContent":["import TonWeb from \"tonweb\";\n\nimport type { StonApiClient as IStonApiClient } from \"@/types\";\n\nconst {\n  HttpProvider,\n  Address,\n  token: {\n    jetton: { JettonMinter },\n  },\n} = TonWeb;\n\n/**\n * This is an implementation of the StonApiClient needed for SDK to work\n * that use TON API via TonWeb http provider instead of Ston.fi public API\n */\nexport class StonApiClient implements IStonApiClient {\n  protected readonly tonApiProvider;\n\n  constructor(tonApiProvider: InstanceType<typeof HttpProvider>) {\n    this.tonApiProvider = tonApiProvider;\n  }\n\n  async getJettonWalletAddress({\n    jettonAddress,\n    ownerAddress,\n  }: { jettonAddress: string; ownerAddress: string }) {\n    const jettonMinter = new JettonMinter(\n      this.tonApiProvider,\n      // @ts-expect-error - not all parameters are really required here\n      {\n        address: jettonAddress,\n      },\n    );\n    const walletAddress = await jettonMinter.getJettonWalletAddress(\n      new Address(ownerAddress),\n    );\n\n    return walletAddress.toString();\n  }\n}\n"],"names":["HttpProvider","Address","JettonMinter","TonWeb","StonApiClient","tonApiProvider","jettonAddress","ownerAddress"],"mappings":";AAIA,MAAM;AAAA,EACJ,cAAAA;AAAA,EACA,SAAAC;AAAA,EACA,OAAO;AAAA,IACL,QAAQ,EAAE,cAAAC,EAAa;AAAA,EACzB;AACF,IAAIC;AAMG,MAAMC,EAAwC;AAAA,EAGnD,YAAYC,GAAmD;AAC7D,SAAK,iBAAiBA;AAAA,EACxB;AAAA,EAEA,MAAM,uBAAuB;AAAA,IAC3B,eAAAC;AAAA,IACA,cAAAC;AAAA,EAAA,GACkD;AAYlD,YAJsB,MAPD,IAAIL;AAAA,MACvB,KAAK;AAAA;AAAA,MAEL;AAAA,QACE,SAASI;AAAA,MACX;AAAA,IAAA,EAEuC;AAAA,MACvC,IAAIL,EAAQM,CAAY;AAAA,IAAA,GAGL;EACvB;AACF;"}