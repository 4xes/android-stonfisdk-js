"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const J=require("tonweb"),S=require("../../../StonApiClient.cjs"),l=require("../../../utils/createJettonTransferMessage.cjs"),y=require("../../../utils/parseAddress.cjs"),h=require("../../../utils/parseBoolean.cjs"),c=require("../constants.cjs"),C=require("./PoolV1.cjs"),{utils:{BN:n,bytesToBase64:T},boc:{Cell:w},Address:s,Contract:p,token:{jetton:{JettonMinter:f}}}=J,u=class g extends p{constructor({tonApiClient:t,stonApiClient:e,gasConstants:r,...o}){super(t,{...o,address:o.address??g.address}),this.stonApiClient=e??new S.StonApiClient(t),this.gasConstants={...g.gasConstants,...r}}async createSwapBody(t){const e=new w;return e.bits.writeUint(c.DEX_OP_CODES.SWAP,32),e.bits.writeAddress(new s(t.askJettonWalletAddress)),e.bits.writeCoins(new n(t.minAskAmount)),e.bits.writeAddress(new s(t.userWalletAddress)),t.referralAddress?(e.bits.writeUint(1,1),e.bits.writeAddress(new s(t.referralAddress))):e.bits.writeUint(0,1),e}async buildSwapJettonToJettonTxParams(t){const e=await this.getAddress(),[r,o]=await Promise.all([(async()=>new s(await this.stonApiClient.getJettonWalletAddress({jettonAddress:t.offerJettonAddress.toString(),ownerAddress:t.userWalletAddress.toString()})))(),(async()=>new s(await this.stonApiClient.getJettonWalletAddress({jettonAddress:t.askJettonAddress.toString(),ownerAddress:e.toString()})))()]),i=await this.createSwapBody({userWalletAddress:t.userWalletAddress,minAskAmount:t.minAskAmount,askJettonWalletAddress:o,referralAddress:t.referralAddress}),d=new n(t.forwardGasAmount??this.gasConstants.swapJettonToJetton.forwardGasAmount),a=l.createJettonTransferMessage({queryId:t.queryId??0,amount:t.offerAmount,destination:e,responseDestination:t.userWalletAddress,forwardTonAmount:d,forwardPayload:i}),A=new n(t.gasAmount??this.gasConstants.swapJettonToJetton.gasAmount);return{to:new s(r.toString(!0,!0,!0)),payload:a,gasAmount:A}}async buildSwapJettonToTonTxParams(t){return await this.buildSwapJettonToJettonTxParams({...t,askJettonAddress:t.proxyTonAddress,gasAmount:t.gasAmount??this.gasConstants.swapJettonToTon.gasAmount,forwardGasAmount:t.forwardGasAmount??this.gasConstants.swapJettonToTon.forwardGasAmount})}async buildSwapTonToJettonTxParams(t){const e=await this.getAddress(),[r,o]=await Promise.all([(async()=>new s(await this.stonApiClient.getJettonWalletAddress({jettonAddress:t.proxyTonAddress.toString(),ownerAddress:e.toString()})))(),(async()=>new s(await this.stonApiClient.getJettonWalletAddress({jettonAddress:t.askJettonAddress.toString(),ownerAddress:e.toString()})))()]),i=await this.createSwapBody({userWalletAddress:t.userWalletAddress,minAskAmount:t.minAskAmount,askJettonWalletAddress:o,referralAddress:t.referralAddress}),d=new n(t.forwardGasAmount??this.gasConstants.swapTonToJetton.forwardGasAmount),a=l.createJettonTransferMessage({queryId:t.queryId??0,amount:t.offerAmount,destination:e,forwardTonAmount:d,forwardPayload:i}),A=new n(t.offerAmount).add(d);return{to:new s(r.toString(!0,!0,!0)),payload:a,gasAmount:A}}async createProvideLiquidityBody(t){const e=new w;return e.bits.writeUint(c.DEX_OP_CODES.PROVIDE_LIQUIDITY,32),e.bits.writeAddress(new s(t.routerWalletAddress)),e.bits.writeCoins(new n(t.minLpOut)),e}async buildProvideLiquidityJettonTxParams(t){const e=await this.getAddress(),[r,o]=await Promise.all([(async()=>new s(await this.stonApiClient.getJettonWalletAddress({jettonAddress:t.sendTokenAddress.toString(),ownerAddress:t.userWalletAddress.toString()})))(),(async()=>new s(await this.stonApiClient.getJettonWalletAddress({jettonAddress:t.otherTokenAddress.toString(),ownerAddress:e.toString()})))()]),i=await this.createProvideLiquidityBody({routerWalletAddress:o,minLpOut:t.minLpOut}),d=new n(t.forwardGasAmount??this.gasConstants.provideLpJetton.forwardGasAmount),a=l.createJettonTransferMessage({queryId:t.queryId??0,amount:t.sendAmount,destination:e,responseDestination:t.userWalletAddress,forwardTonAmount:d,forwardPayload:i}),A=new n(t.gasAmount??this.gasConstants.provideLpJetton.gasAmount);return{to:new s(r.toString(!0,!0,!0)),payload:a,gasAmount:A}}async buildProvideLiquidityTonTxParams(t){const e=await this.getAddress(),[r,o]=await Promise.all([(async()=>new s(await this.stonApiClient.getJettonWalletAddress({jettonAddress:t.proxyTonAddress.toString(),ownerAddress:e.toString()})))(),(async()=>new s(await this.stonApiClient.getJettonWalletAddress({jettonAddress:t.otherTokenAddress.toString(),ownerAddress:e.toString()})))()]),i=await this.createProvideLiquidityBody({routerWalletAddress:o,minLpOut:t.minLpOut}),d=new n(t.forwardGasAmount??this.gasConstants.provideLpTon.forwardGasAmount),a=l.createJettonTransferMessage({queryId:t.queryId??0,amount:t.sendAmount,destination:e,forwardTonAmount:d,forwardPayload:i}),A=new n(t.sendAmount).add(d);return{to:new s(r.toString(!0,!0,!0)),payload:a,gasAmount:A}}async getPoolAddress(t){const e=new w;e.bits.writeAddress(new s(t.token0));const r=new w;r.bits.writeAddress(new s(t.token1));const o=T(await e.toBoc(!1)),i=T(await r.toBoc(!1)),d=await this.getAddress(),a=await this.provider.call2(d.toString(),"get_pool_address",[["tvm.Slice",o],["tvm.Slice",i]]);return y.parseAddress(a)}async getPool(t){const e=new f(this.provider,{address:t.token0}),r=new f(this.provider,{address:t.token1}),o=await this.getAddress(),[i,d]=await Promise.all([this.stonApiClient.getJettonWalletAddress({jettonAddress:(await e.getAddress()).toString(),ownerAddress:o.toString()}),this.stonApiClient.getJettonWalletAddress({jettonAddress:(await r.getAddress()).toString(),ownerAddress:o.toString()})]),a=await this.getPoolAddress({token0:i,token1:d});return a?new C.PoolV1({tonApiClient:this.provider,stonApiClient:this.stonApiClient,address:a}):null}async getData(){const t=await this.getAddress(),e=await this.provider.call2(t.toString(),"get_router_data",[]);return{isLocked:h.parseBoolean(e[0]),adminAddress:y.parseAddressNotNull(e[1]),tempUpgrade:e[2],poolCode:e[3],jettonLpWalletCode:e[4],lpAccountCode:e[5]}}};u.version=c.DEX_VERSION.v1;u.address=new s("EQB3ncyBUTjZUA5EnFKR5_EnOMI9V1tTEAAPaiU71gc4TiUt");u.gasConstants={swapJettonToJetton:{gasAmount:new n("265000000"),forwardGasAmount:new n("205000000")},swapJettonToTon:{gasAmount:new n("185000000"),forwardGasAmount:new n("125000000")},swapTonToJetton:{forwardGasAmount:new n("215000000")},provideLpJetton:{gasAmount:new n("300000000"),forwardGasAmount:new n("240000000")},provideLpTon:{forwardGasAmount:new n("260000000")}};let W=u;exports.RouterV1=W;
//# sourceMappingURL=RouterV1.cjs.map
