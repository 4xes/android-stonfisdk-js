"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const g=require("tonweb"),w=require("../../../StonApiClient.cjs"),d=require("../../../utils/parseAddress.cjs"),l=require("../constants.cjs"),p=require("./LpAccountV1.cjs"),{utils:{BN:i,bytesToBase64:u},boc:{Cell:c},Address:r,token:{jetton:{JettonMinter:y,JettonWallet:S}}}=g,a=class A extends y{constructor({tonApiClient:e,stonApiClient:t,gasConstants:s,...o}){super(e,o),this.stonApiClient=t??new w.StonApiClient(e),this.gasConstants={...A.gasConstants,...s}}async createCollectFeesBody(e){const t=new c;return t.bits.writeUint(l.DEX_OP_CODES.COLLECT_FEES,32),t.bits.writeUint((e==null?void 0:e.queryId)??0,64),t}async buildCollectFeeTxParams(e){const t=await this.getAddress(),s=await this.createCollectFeesBody({queryId:e==null?void 0:e.queryId}),o=new i((e==null?void 0:e.gasAmount)??this.gasConstants.collectFees);return{to:new r(t.toString(!0,!0,!0)),payload:s,gasAmount:o}}async createBurnBody(e){const t=new c;return t.bits.writeUint(l.DEX_OP_CODES.REQUEST_BURN,32),t.bits.writeUint(e.queryId??0,64),t.bits.writeCoins(new i(e.amount)),t.bits.writeAddress(new r(e.responseAddress)),t}async buildBurnTxParams(e){const t=await this.getAddress(),[s,o]=await Promise.all([(async()=>new r(await this.stonApiClient.getJettonWalletAddress({jettonAddress:t.toString(),ownerAddress:e.responseAddress.toString()})))(),this.createBurnBody({amount:e.amount,responseAddress:e.responseAddress,queryId:e.queryId})]),n=new i(e.gasAmount??this.gasConstants.burn);return{to:new r(s.toString(!0,!0,!0)),payload:o,gasAmount:n}}async getExpectedOutputs(e){const t=new c;t.bits.writeAddress(new r(e.jettonWallet));const s=u(await t.toBoc(!1)),o=await this.getAddress(),n=await this.provider.call2(o.toString(),"get_expected_outputs",[["int",e.amount.toString()],["tvm.Slice",s]]);return{jettonToReceive:n[0],protocolFeePaid:n[1],refFeePaid:n[2]}}async getExpectedTokens(e){const t=await this.getAddress();return await this.provider.call2(t.toString(),"get_expected_tokens",[["int",e.amount0.toString()],["int",e.amount1.toString()]])}async getExpectedLiquidity(e){const t=await this.getAddress(),s=await this.provider.call2(t.toString(),"get_expected_liquidity",[["int",e.jettonAmount.toString()]]);return{amount0:s[0],amount1:s[1]}}async getLpAccountAddress(e){const t=new c;t.bits.writeAddress(new r(e.ownerAddress));const s=u(await t.toBoc(!1)),o=await this.getAddress(),n=await this.provider.call2(o.toString(),"get_lp_account_address",[["tvm.Slice",s]]);return d.parseAddress(n)}async getJettonWallet(e){const t=await this.stonApiClient.getJettonWalletAddress({jettonAddress:(await this.getAddress()).toString(),ownerAddress:e.ownerAddress.toString()});return new S(this.provider,{address:t})}async getData(){const e=await this.getAddress(),t=await this.provider.call2(e.toString(),"get_pool_data");return{reserve0:t[0],reserve1:t[1],token0WalletAddress:d.parseAddressNotNull(t[2]),token1WalletAddress:d.parseAddressNotNull(t[3]),lpFee:t[4],protocolFee:t[5],refFee:t[6],protocolFeeAddress:d.parseAddress(t[7]),collectedToken0ProtocolFee:t[8],collectedToken1ProtocolFee:t[9]}}async getLpAccount(e){const t=await this.getLpAccountAddress(e);return t?new p.LpAccountV1({tonApiClient:this.provider,stonApiClient:this.stonApiClient,address:t}):null}};a.version=l.DEX_VERSION.v1;a.gasConstants={collectFees:new i("1100000000"),burn:new i("500000000")};let h=a;exports.PoolV1=h;
//# sourceMappingURL=PoolV1.cjs.map
