{"version":3,"file":"FarmNftMinterV3.cjs","sources":["../../../../src/contracts/farm/v3/FarmNftMinterV3.ts"],"sourcesContent":["import TonWeb, { type NftCollectionOptions } from \"tonweb\";\n\nimport type {\n  BN,\n  Cell,\n  Address,\n  AddressType,\n  QueryIdType,\n  MessageData,\n  AmountType,\n  SdkContractOptions,\n} from \"@/types\";\nimport { StonApiClient } from \"@/StonApiClient\";\nimport { parseAddress, parseAddressNotNull } from \"@/utils/parseAddress\";\nimport { parseBoolean } from \"@/utils/parseBoolean\";\nimport { parseString } from \"@/utils/parseString\";\nimport { createJettonTransferMessage } from \"@/utils/createJettonTransferMessage\";\nimport { parseDictionaryCell } from \"@/utils/parseDictionary\";\nimport { parseCell } from \"@/utils/parseCell\";\n\nimport { FARM_OP_CODES, FARM_VERSION } from \"../constants\";\n\nconst {\n  boc: { Cell },\n  utils: { Address, BN },\n  token: {\n    nft: { NftCollection },\n    jetton: { JettonWallet },\n  },\n} = TonWeb;\n\n/**\n *  @type {FarmDataAccrued} represent state of the accrued data for pool\n *\n * @property {BN} depositedNanorewards - Deposited rewards in nanounits\n * @property {BN} accruedPerUnitNanorewards - Number of accrued nanorewards per basic stake token unit\n * @property {BN} accruedFeeNanorewards - Accrued fees\n * @property {BN} claimedNanorewards - Number of claimed rewards in nanounits\n * @property {BN} claimedFeeNanorewards - Claimed fees\n * @property {BN} accruedNanorewards - Total number of accrued rewards in nanounits\n * @property {BN} lastUpdateTime - Last time farming values were updated\n */\nexport type FarmDataAccrued = {\n  depositedNanorewards: BN;\n  accruedPerUnitNanorewards: BN;\n  accruedFeeNanorewards: BN;\n  claimedNanorewards: BN;\n  claimedFeeNanorewards: BN;\n  accruedNanorewards: BN;\n  lastUpdateTime: BN;\n};\n\n/**\n *  @type {FarmDataParameters} represent state of the pool parameters\n *\n * @property {BN} adminFee - Admin fee; divider is 10000\n * @property {BN} nanorewardsPer24h - Total number of accrued rewards per 24h in nanounits\n * @property {boolean} unrestrictedDepositRewards - If rewards can be deposited by anyone\n * @property {Address} rewardTokenWallet - Minter's reward jetton wallet\n * @property {boolean} canChangeFee - If can change fee\n * @property {BN} status - Status of the contract\n */\nexport type FarmDataParameters = {\n  adminFee: BN;\n  nanorewardsPer24h: BN;\n  unrestrictedDepositRewards: boolean;\n  rewardTokenWallet: Address;\n  canChangeFee: boolean;\n  status: number;\n};\n\nexport interface FarmNftMinterV3Options\n  extends SdkContractOptions,\n    NftCollectionOptions {\n  address: Required<NftCollectionOptions>[\"address\"];\n  gasConstants?: Partial<typeof FarmNftMinterV3.gasConstants>;\n}\n\nexport class FarmNftMinterV3 extends NftCollection {\n  public static readonly version: FARM_VERSION = FARM_VERSION.v3;\n\n  public static readonly gasConstants = {\n    stakeFwdBase: new BN(\"210000000\"),\n    stakeFwdPerPool: new BN(\"15000000\"),\n    stake: new BN(\"100000000\"),\n  };\n\n  protected readonly stonApiClient;\n\n  public readonly gasConstants;\n\n  constructor({\n    tonApiClient,\n    stonApiClient,\n    gasConstants,\n    ...options\n  }: FarmNftMinterV3Options) {\n    super(tonApiClient, options);\n\n    this.stonApiClient = stonApiClient ?? new StonApiClient(tonApiClient);\n    this.gasConstants = {\n      ...FarmNftMinterV3.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createStakeBody(params?: {\n    ownerAddress?: AddressType;\n  }): Promise<Cell> {\n    const payload = new Cell();\n\n    payload.bits.writeUint(FARM_OP_CODES.STAKE, 32);\n    payload.bits.writeAddress(\n      params?.ownerAddress ? new Address(params.ownerAddress) : undefined,\n    );\n\n    return payload;\n  }\n\n  /**\n   * Build all data required to execute a jetton `stake` transaction\n   *\n   * @param {Address | string} params.userWalletAddress - User's address\n   * @param {Address | string} params.jettonAddress - Jetton address of token to be staked\n   * @param {BN | number} params.jettonAmount - Amount of tokens to be staked (in basic token units)\n   * @param {number | undefined} params.poolCount - Optional; Number of deployed farm reward pools; If undefined value will get onchain\n   * @param {Address | string} params.ownerAddress - Optional; custom owner of stake; if undefined stake owner is sender address\n   * @param {BN | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} containing all data required to execute a jetton `stake` transaction\n   */\n  public async buildStakeTxParams(params: {\n    userWalletAddress: AddressType;\n    jettonAddress: AddressType;\n    jettonAmount: AmountType;\n    poolCount?: number;\n    ownerAddress?: AddressType;\n    queryId?: QueryIdType;\n  }): Promise<MessageData> {\n    const [jettonWalletAddress, forwardPayload, address, poolCount] =\n      await Promise.all([\n        (async () =>\n          new Address(\n            await this.stonApiClient.getJettonWalletAddress({\n              jettonAddress: params.jettonAddress.toString(),\n              ownerAddress: params.userWalletAddress.toString(),\n            }),\n          ))(),\n        this.createStakeBody({\n          ownerAddress: params.ownerAddress,\n        }),\n        this.getAddress(),\n        (async () => params.poolCount ?? (await this.getData()).poolCount)(),\n      ]);\n\n    const forwardTonAmount = this.gasConstants.stakeFwdBase.add(\n      this.gasConstants.stakeFwdPerPool.muln(poolCount + 1),\n    );\n\n    const payload = createJettonTransferMessage({\n      queryId: params.queryId ?? 0,\n      amount: params.jettonAmount,\n      destination: address,\n      responseDestination: params.userWalletAddress,\n      forwardTonAmount,\n      forwardPayload,\n    });\n\n    const gasAmount = forwardTonAmount.add(this.gasConstants.stake);\n\n    return {\n      to: new Address(jettonWalletAddress.toString(true, true, true)),\n      payload,\n      gasAmount,\n    };\n  }\n\n  /**\n   * @returns {Address} address of minter for staking jetton that is used for farming\n   */\n  public async getStakingJettonAddress(): Promise<Address> {\n    const { stakingTokenWallet } = await this.getData();\n\n    const jettonWallet = new JettonWallet(this.provider, {\n      address: stakingTokenWallet,\n    });\n\n    const { jettonMinterAddress } = await jettonWallet.getData();\n\n    return jettonMinterAddress;\n  }\n\n  /**\n   * @returns structure containing pending data\n   *\n   * @property {BN} changeCustodianTs - Timestamp when 'change_custodian' was initiated\n   * @property {BN} sendMsgTs - Timestamp when 'send_raw_msg' was initiated\n   * @property {BN} codeUpgradeTs - Timestamp when 'code_upgrade' was initiated\n   * @property {Address} newCustodian - New custodian that will be set after confirmation\n   * @property {Cell} pendingMsg - Pending msg that will be sends after confirmation\n   * @property {Cell} newCode - New contract code that will be set after confirmation\n   * @property {Cell} newStorage - New contract storage that will be set after confirmation\n   */\n  public async getPendingData() {\n    const contractAddress = await this.getAddress();\n\n    const result = await this.provider.call2(\n      contractAddress.toString(),\n      \"get_pending_data\",\n    );\n\n    return {\n      changeCustodianTs: result[0] as BN,\n      sendMsgTs: result[1] as BN,\n      codeUpgradeTs: result[2] as BN,\n      newCustodian: parseAddress(result[3]),\n      pendingMsg: result[4] as Cell,\n      newCode: result[5] as Cell,\n      newStorage: result[6] as Cell,\n    };\n  }\n\n  /**\n   * @returns structure containing version data\n   *\n   * @property {number} major - Major version; breaking changes in api\n   * @property {number} minor - Minor version; non-breaking new functionality\n   * @property {string} development - Development version; can contain breaking changes\n   */\n  public async getVersion() {\n    const contractAddress = await this.getAddress();\n\n    const result = await this.provider.call2(\n      contractAddress.toString(),\n      \"get_version\",\n    );\n\n    return {\n      major: (result[0] as BN).toNumber(),\n      minor: (result[1] as BN).toNumber(),\n      development: parseString(result[2]),\n    };\n  }\n\n  /**\n   * @returns structure containing current state of the minter\n   *\n   * @property {BN} nextItemIndex - Index of the next nft in this collection\n   * @property {number} status - Status of the contract: uninitialized `0`, operational `1`, pause_all `2`, frozen `3`, retired `4`,\n   * @property {number} poolCount - Pools count\n   * @property {BN} currentStakedTokens - Number of staked tokens in basic token units\n   * @property {BN} contractUniqueId - Minter id\n   * @property {BN} minStakeTime - Minimum staking time\n   * @property {Address} stakingTokenWallet - Minter's staking jetton wallet\n   * @property {Address} custodianAddress - Custodian address\n   * @property {boolean} canChangeCustodian - If can change custodian\n   * @property {boolean} canSendRawMsg - If admin can send arbitrary raw msg from Minter\n   * @property {Map<number, FarmDataAccrued>} farmDataAccrued - Accrued data for pools\n   * @property {Map<number, FarmDataParameters>} farmDataParameters - Pools parameters\n   */\n  public async getData() {\n    const contractAddress = await this.getAddress();\n\n    const result = await this.provider.call2(\n      contractAddress.toString(),\n      \"get_farming_minter_data\",\n    );\n\n    const farmDataAccruedDict = parseDictionaryCell(result[10] as Cell, 8);\n    const farmDataAccrued = new Map<number, FarmDataAccrued>();\n\n    farmDataAccruedDict.forEach((cell, poolIndex) => {\n      const slice = parseCell(cell);\n      const accruedData = {\n        depositedNanorewards: slice.loadUint(150),\n        accruedPerUnitNanorewards: slice.loadUint(150),\n        accruedFeeNanorewards: slice.loadUint(150),\n        claimedNanorewards: slice.loadUint(150),\n        claimedFeeNanorewards: slice.loadUint(150),\n        accruedNanorewards: slice.loadUint(150),\n        lastUpdateTime: slice.loadUint(64),\n      };\n\n      farmDataAccrued.set(Number(poolIndex), accruedData);\n    });\n\n    const farmDataParametersDict = parseDictionaryCell(result[11] as Cell, 8);\n    const farmDataParameters = new Map<number, FarmDataParameters>();\n\n    farmDataParametersDict.forEach((cell, poolIndex) => {\n      const slice = parseCell(cell);\n      const parametersData = {\n        adminFee: slice.loadUint(16),\n        nanorewardsPer24h: slice.loadUint(150),\n        unrestrictedDepositRewards: slice.loadBit(),\n        rewardTokenWallet: slice.loadAddress(),\n        canChangeFee: slice.loadBit(),\n        status: slice.loadUint(8).toNumber(),\n      };\n\n      farmDataParameters.set(Number(poolIndex), parametersData);\n    });\n\n    return {\n      nextItemIndex: result[0] as BN,\n      status: (result[1] as BN).toNumber(),\n      poolCount: (result[2] as BN).toNumber(),\n      currentStakedTokens: result[3] as BN,\n      contractUniqueId: result[4] as BN,\n      minStakeTime: result[5] as BN,\n      stakingTokenWallet: parseAddressNotNull(result[6]),\n      custodianAddress: parseAddressNotNull(result[7]),\n      canChangeCustodian: parseBoolean(result[8]),\n      canSendRawMsg: parseBoolean(result[9]),\n      farmDataAccrued: farmDataAccrued,\n      farmDataParameters: farmDataParameters,\n    };\n  }\n}\n"],"names":["Cell","Address","BN","NftCollection","JettonWallet","TonWeb","_FarmNftMinterV3","tonApiClient","stonApiClient","gasConstants","options","StonApiClient","params","payload","FARM_OP_CODES","jettonWalletAddress","forwardPayload","address","poolCount","forwardTonAmount","createJettonTransferMessage","gasAmount","stakingTokenWallet","jettonWallet","jettonMinterAddress","contractAddress","result","parseAddress","parseString","farmDataAccruedDict","parseDictionaryCell","farmDataAccrued","cell","poolIndex","slice","parseCell","accruedData","farmDataParametersDict","farmDataParameters","parametersData","parseAddressNotNull","parseBoolean","FARM_VERSION","FarmNftMinterV3"],"mappings":"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"}