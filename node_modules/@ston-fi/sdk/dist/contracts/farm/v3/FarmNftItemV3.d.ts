import { type NftItemOptions } from "tonweb";
import type { Cell, QueryIdType, MessageData, SdkContractOptions } from '../../../types';
declare const Cell: typeof import("tonweb/dist/types/boc/cell").Cell, NftItem: typeof import("tonweb/dist/types/contract/token/nft/nft-item").NftItem;
export interface FarmNftItemV3Options extends SdkContractOptions, NftItemOptions {
    address: Required<NftItemOptions>["address"];
    gasConstants?: Partial<typeof FarmNftItemV3.gasConstants>;
}
export declare class FarmNftItemV3 extends NftItem {
    static readonly version: "v3";
    static readonly gasConstants: {
        claimRewardsBase: import("bn.js");
        claimRewardsPerPool: import("bn.js");
        unstakeBase: import("bn.js");
        unstakePerPool: import("bn.js");
        destroy: import("bn.js");
    };
    protected readonly stonApiClient: import('../../../types').StonApiClient;
    readonly gasConstants: {
        claimRewardsBase: import("bn.js");
        claimRewardsPerPool: import("bn.js");
        unstakeBase: import("bn.js");
        unstakePerPool: import("bn.js");
        destroy: import("bn.js");
    };
    constructor({ tonApiClient, stonApiClient, gasConstants, ...options }: FarmNftItemV3Options);
    createClaimRewardsBody(params: {
        queryId?: QueryIdType;
    } & ({
        claimAll: true;
    } | {
        claimAll: false;
        poolIndex: number;
    })): Promise<Cell>;
    /**
     * Build all data required to execute a `claim_rewards` transaction.
     *
     * @param {number | undefined} params.poolCount - Optional; Number of deployed farm reward pools; If undefined value will get onchain
     * @param {number | undefined} params.poolIndex - Optional; farm reward pool index used for claiming; If undefined claim rewards from all pools
     * @param {BN | number | undefined} params.queryId - Optional; query id
     *
     * @returns {MessageData} all data required to execute a `claim_rewards` transaction.
     */
    buildClaimRewardsTxParams(params: {
        poolCount?: number;
        queryId?: QueryIdType;
        poolIndex?: number;
    }): Promise<MessageData>;
    createUnstakeBody(params?: {
        queryId?: QueryIdType;
    }): Promise<Cell>;
    /**
     * Build all data required to execute a `unstake` transaction.
     *
     * @param {number | undefined} params.poolCount -  Optional; Number of deployed farm reward pools; If undefined value will get onchain
     * @param {BN | number | undefined} params.queryId - Optional; query id
     *
     * @returns {MessageData} all data required to execute a `unstake` transaction.
     */
    buildUnstakeTxParams(params: {
        poolCount?: number;
        queryId?: QueryIdType;
    }): Promise<MessageData>;
    createDestroyBody(params?: {
        queryId?: QueryIdType;
    }): Promise<Cell>;
    /**
     * Build all data required to execute a `destroy` transaction.
     *
     * @param {BN | string | number | undefined} params.queryId - Optional; query id
     *
     * @returns {MessageData} all data required to execute a `destroy` transaction.
     */
    buildDestroyTxParams(params?: {
        queryId?: QueryIdType;
    }): Promise<MessageData>;
    /**
     * @returns structure containing current state of the farm NFT
     *
     * @property {number} status Status of the contract: uninitialized (0), active (1), unstaked (2), claiming (3), unstaked_pending (4)
     * @property {BN} revokeTime Timestamp of unstake
     * @property {BN} stakedTokens Amount of staked tokens
     * @property {BN} stakeDate Timestamp in which the owner started staking
     * @property {Map<number, BN>} claimedPerUnit `accrued_per_unit_nanorewards amounts` for each pool at the time of last claim for this user
     * @property {Address} ownerAddress Owner address of farm nft
     */
    getFarmingData(): Promise<{
        status: number;
        revokeTime: import("bn.js");
        stakedTokens: import("bn.js");
        stakeDate: import("bn.js");
        claimedPerUnit: Map<number, import("bn.js")>;
        ownerAddress: import("tonweb/dist/types/utils/address").Address;
    }>;
    getPoolCount(): Promise<number>;
}
export {};
