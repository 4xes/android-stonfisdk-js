"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const h=require("tonweb"),S=require("../../../StonApiClient.cjs"),l=require("../../../utils/parseAddress.cjs"),A=require("../../../utils/parseBoolean.cjs"),k=require("../../../utils/parseString.cjs"),y=require("../../../utils/createJettonTransferMessage.cjs"),p=require("../../../utils/parseDictionary/index.cjs"),m=require("../../../utils/parseCell.cjs"),C=require("../constants.cjs"),{boc:{Cell:f},utils:{Address:u,BN:g},token:{nft:{NftCollection:D},jetton:{JettonWallet:T}}}=h,w=class N extends D{constructor({tonApiClient:t,stonApiClient:e,gasConstants:n,...a}){super(t,a),this.stonApiClient=e??new S.StonApiClient(t),this.gasConstants={...N.gasConstants,...n}}async createStakeBody(t){const e=new f;return e.bits.writeUint(C.FARM_OP_CODES.STAKE,32),e.bits.writeAddress(t!=null&&t.ownerAddress?new u(t.ownerAddress):void 0),e}async buildStakeTxParams(t){const[e,n,a,i]=await Promise.all([(async()=>new u(await this.stonApiClient.getJettonWalletAddress({jettonAddress:t.jettonAddress.toString(),ownerAddress:t.userWalletAddress.toString()})))(),this.createStakeBody({ownerAddress:t.ownerAddress}),this.getAddress(),(async()=>t.poolCount??(await this.getData()).poolCount)()]),r=this.gasConstants.stakeFwdBase.add(this.gasConstants.stakeFwdPerPool.muln(i+1)),o=y.createJettonTransferMessage({queryId:t.queryId??0,amount:t.jettonAmount,destination:a,responseDestination:t.userWalletAddress,forwardTonAmount:r,forwardPayload:n}),d=r.add(this.gasConstants.stake);return{to:new u(e.toString(!0,!0,!0)),payload:o,gasAmount:d}}async getStakingJettonAddress(){const{stakingTokenWallet:t}=await this.getData(),e=new T(this.provider,{address:t}),{jettonMinterAddress:n}=await e.getData();return n}async getPendingData(){const t=await this.getAddress(),e=await this.provider.call2(t.toString(),"get_pending_data");return{changeCustodianTs:e[0],sendMsgTs:e[1],codeUpgradeTs:e[2],newCustodian:l.parseAddress(e[3]),pendingMsg:e[4],newCode:e[5],newStorage:e[6]}}async getVersion(){const t=await this.getAddress(),e=await this.provider.call2(t.toString(),"get_version");return{major:e[0].toNumber(),minor:e[1].toNumber(),development:k.parseString(e[2])}}async getData(){const t=await this.getAddress(),e=await this.provider.call2(t.toString(),"get_farming_minter_data"),n=p.parseDictionaryCell(e[10],8),a=new Map;n.forEach((o,d)=>{const s=m.parseCell(o),c={depositedNanorewards:s.loadUint(150),accruedPerUnitNanorewards:s.loadUint(150),accruedFeeNanorewards:s.loadUint(150),claimedNanorewards:s.loadUint(150),claimedFeeNanorewards:s.loadUint(150),accruedNanorewards:s.loadUint(150),lastUpdateTime:s.loadUint(64)};a.set(Number(d),c)});const i=p.parseDictionaryCell(e[11],8),r=new Map;return i.forEach((o,d)=>{const s=m.parseCell(o),c={adminFee:s.loadUint(16),nanorewardsPer24h:s.loadUint(150),unrestrictedDepositRewards:s.loadBit(),rewardTokenWallet:s.loadAddress(),canChangeFee:s.loadBit(),status:s.loadUint(8).toNumber()};r.set(Number(d),c)}),{nextItemIndex:e[0],status:e[1].toNumber(),poolCount:e[2].toNumber(),currentStakedTokens:e[3],contractUniqueId:e[4],minStakeTime:e[5],stakingTokenWallet:l.parseAddressNotNull(e[6]),custodianAddress:l.parseAddressNotNull(e[7]),canChangeCustodian:A.parseBoolean(e[8]),canSendRawMsg:A.parseBoolean(e[9]),farmDataAccrued:a,farmDataParameters:r}}};w.version=C.FARM_VERSION.v3;w.gasConstants={stakeFwdBase:new g("210000000"),stakeFwdPerPool:new g("15000000"),stake:new g("100000000")};let M=w;exports.FarmNftMinterV3=M;
//# sourceMappingURL=FarmNftMinterV3.cjs.map
