{"version":3,"file":"FarmNftItemV3.js","sources":["../../../../src/contracts/farm/v3/FarmNftItemV3.ts"],"sourcesContent":["import TonWeb, { type NftItemOptions } from \"tonweb\";\n\nimport type {\n  BN,\n  Cell,\n  QueryIdType,\n  MessageData,\n  SdkContractOptions,\n} from \"@/types\";\nimport { StonApiClient } from \"@/StonApiClient\";\nimport { createSbtDestroyMessage } from \"@/utils/createSbtDestroyMessage\";\nimport { parseAddressNotNull } from \"@/utils/parseAddress\";\nimport { parseDictionaryUint } from \"@/utils/parseDictionary\";\n\nimport { FARM_OP_CODES, FARM_VERSION } from \"../constants\";\nimport { FarmNftMinterV3 } from \"./FarmNftMinterV3\";\n\nconst {\n  boc: { Cell },\n  utils: { BN, Address },\n  token: {\n    nft: { NftItem },\n  },\n} = TonWeb;\n\nexport interface FarmNftItemV3Options\n  extends SdkContractOptions,\n    NftItemOptions {\n  address: Required<NftItemOptions>[\"address\"];\n  gasConstants?: Partial<typeof FarmNftItemV3.gasConstants>;\n}\n\nexport class FarmNftItemV3 extends NftItem {\n  public static readonly version = FARM_VERSION.v3;\n\n  public static readonly gasConstants = {\n    claimRewardsBase: new BN(\"350000000\"),\n    claimRewardsPerPool: new BN(\"130000000\"),\n    unstakeBase: new BN(\"450000000\"),\n    unstakePerPool: new BN(\"130000000\"),\n    destroy: new BN(\"50000000\"),\n  };\n\n  protected readonly stonApiClient;\n\n  public readonly gasConstants;\n\n  constructor({\n    tonApiClient,\n    stonApiClient,\n    gasConstants,\n    ...options\n  }: FarmNftItemV3Options) {\n    super(tonApiClient, options);\n\n    this.stonApiClient = stonApiClient ?? new StonApiClient(tonApiClient);\n    this.gasConstants = {\n      ...FarmNftItemV3.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createClaimRewardsBody(\n    params: {\n      queryId?: QueryIdType;\n    } & (\n      | {\n          claimAll: true;\n        }\n      | {\n          claimAll: false;\n          poolIndex: number;\n        }\n    ),\n  ): Promise<Cell> {\n    const message = new Cell();\n\n    message.bits.writeUint(FARM_OP_CODES.CLAIM_REWARDS, 32);\n    message.bits.writeUint(params.queryId ?? 0, 64);\n\n    if (params.claimAll) {\n      message.bits.writeUint(1, 1);\n      message.bits.writeUint(0, 8);\n    } else {\n      message.bits.writeUint(0, 1);\n      message.bits.writeUint(params.poolIndex, 8);\n    }\n\n    return message;\n  }\n\n  /**\n   * Build all data required to execute a `claim_rewards` transaction.\n   *\n   * @param {number | undefined} params.poolCount - Optional; Number of deployed farm reward pools; If undefined value will get onchain\n   * @param {number | undefined} params.poolIndex - Optional; farm reward pool index used for claiming; If undefined claim rewards from all pools\n   * @param {BN | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} all data required to execute a `claim_rewards` transaction.\n   */\n  public async buildClaimRewardsTxParams(params: {\n    poolCount?: number;\n    queryId?: QueryIdType;\n    poolIndex?: number;\n  }): Promise<MessageData> {\n    const to = await this.getAddress();\n\n    const payload = await this.createClaimRewardsBody({\n      queryId: params.queryId,\n      claimAll: params.poolIndex === undefined,\n      poolIndex: params.poolIndex ?? 0,\n    });\n\n    const poolCount = params.poolCount ?? (await this.getPoolCount());\n\n    const gasAmount = this.gasConstants.claimRewardsBase.add(\n      this.gasConstants.claimRewardsPerPool.muln(poolCount - 1),\n    );\n\n    return {\n      to: new Address(to.toString(true, true, true)),\n      payload,\n      gasAmount,\n    };\n  }\n\n  public async createUnstakeBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    const message = new Cell();\n\n    message.bits.writeUint(FARM_OP_CODES.UNSTAKE, 32);\n    message.bits.writeUint(params?.queryId ?? 0, 64);\n\n    return message;\n  }\n\n  /**\n   * Build all data required to execute a `unstake` transaction.\n   *\n   * @param {number | undefined} params.poolCount -  Optional; Number of deployed farm reward pools; If undefined value will get onchain\n   * @param {BN | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} all data required to execute a `unstake` transaction.\n   */\n  public async buildUnstakeTxParams(params: {\n    poolCount?: number;\n    queryId?: QueryIdType;\n  }): Promise<MessageData> {\n    const to = await this.getAddress();\n\n    const payload = await this.createUnstakeBody({\n      queryId: params.queryId,\n    });\n\n    const poolCount = params.poolCount ?? (await this.getPoolCount());\n\n    const gasAmount = this.gasConstants.unstakeBase.add(\n      this.gasConstants.unstakePerPool.muln(poolCount - 1),\n    );\n\n    return {\n      to: new Address(to.toString(true, true, true)),\n      payload,\n      gasAmount,\n    };\n  }\n\n  public async createDestroyBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return createSbtDestroyMessage({\n      queryId: params?.queryId ?? 0,\n    });\n  }\n\n  /**\n   * Build all data required to execute a `destroy` transaction.\n   *\n   * @param {BN | string | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} all data required to execute a `destroy` transaction.\n   */\n  public async buildDestroyTxParams(params?: {\n    queryId?: QueryIdType;\n  }): Promise<MessageData> {\n    const to = await this.getAddress();\n\n    const payload = await this.createDestroyBody({\n      queryId: params?.queryId,\n    });\n\n    const gasAmount = this.gasConstants.destroy;\n\n    return {\n      to: new Address(to.toString(true, true, true)),\n      payload,\n      gasAmount,\n    };\n  }\n\n  /**\n   * @returns structure containing current state of the farm NFT\n   *\n   * @property {number} status Status of the contract: uninitialized (0), active (1), unstaked (2), claiming (3), unstaked_pending (4)\n   * @property {BN} revokeTime Timestamp of unstake\n   * @property {BN} stakedTokens Amount of staked tokens\n   * @property {BN} stakeDate Timestamp in which the owner started staking\n   * @property {Map<number, BN>} claimedPerUnit `accrued_per_unit_nanorewards amounts` for each pool at the time of last claim for this user\n   * @property {Address} ownerAddress Owner address of farm nft\n   */\n  public async getFarmingData() {\n    const contractAddress = await this.getAddress();\n\n    const result = await this.provider.call2(\n      contractAddress.toString(),\n      \"get_farming_data\",\n    );\n\n    const claimedPerUnitDict = parseDictionaryUint(result[4] as Cell, 8, 150);\n    const claimedPerUnit = new Map<number, BN>();\n\n    claimedPerUnitDict.forEach((accruedPerUnitNanorewards, poolIndex) => {\n      claimedPerUnit.set(Number(poolIndex), accruedPerUnitNanorewards);\n    });\n\n    return {\n      status: (result[0] as BN).toNumber(),\n      revokeTime: result[1] as BN,\n      stakedTokens: result[2] as BN,\n      stakeDate: result[3] as BN,\n      claimedPerUnit,\n      ownerAddress: parseAddressNotNull(result[5]),\n    };\n  }\n\n  public async getPoolCount() {\n    const { collectionAddress: minterAddress } = await this.getData();\n\n    const minter = new FarmNftMinterV3({\n      tonApiClient: this.provider,\n      stonApiClient: this.stonApiClient,\n      address: minterAddress,\n    });\n\n    const { poolCount } = await minter.getData();\n\n    return poolCount;\n  }\n}\n"],"names":["Cell","BN","Address","NftItem","TonWeb","_FarmNftItemV3","tonApiClient","stonApiClient","gasConstants","options","StonApiClient","params","message","FARM_OP_CODES","to","payload","poolCount","gasAmount","createSbtDestroyMessage","contractAddress","result","claimedPerUnitDict","parseDictionaryUint","claimedPerUnit","accruedPerUnitNanorewards","poolIndex","parseAddressNotNull","minterAddress","minter","FarmNftMinterV3","FARM_VERSION","FarmNftItemV3"],"mappings":"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"}