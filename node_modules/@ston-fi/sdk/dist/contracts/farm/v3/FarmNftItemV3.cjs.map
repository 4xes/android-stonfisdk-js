{"version":3,"file":"FarmNftItemV3.cjs","sources":["../../../../src/contracts/farm/v3/FarmNftItemV3.ts"],"sourcesContent":["import TonWeb, { type NftItemOptions } from \"tonweb\";\n\nimport type {\n  BN,\n  Cell,\n  QueryIdType,\n  MessageData,\n  SdkContractOptions,\n} from \"@/types\";\nimport { StonApiClient } from \"@/StonApiClient\";\nimport { createSbtDestroyMessage } from \"@/utils/createSbtDestroyMessage\";\nimport { parseAddressNotNull } from \"@/utils/parseAddress\";\nimport { parseDictionaryUint } from \"@/utils/parseDictionary\";\n\nimport { FARM_OP_CODES, FARM_VERSION } from \"../constants\";\nimport { FarmNftMinterV3 } from \"./FarmNftMinterV3\";\n\nconst {\n  boc: { Cell },\n  utils: { BN, Address },\n  token: {\n    nft: { NftItem },\n  },\n} = TonWeb;\n\nexport interface FarmNftItemV3Options\n  extends SdkContractOptions,\n    NftItemOptions {\n  address: Required<NftItemOptions>[\"address\"];\n  gasConstants?: Partial<typeof FarmNftItemV3.gasConstants>;\n}\n\nexport class FarmNftItemV3 extends NftItem {\n  public static readonly version = FARM_VERSION.v3;\n\n  public static readonly gasConstants = {\n    claimRewardsBase: new BN(\"350000000\"),\n    claimRewardsPerPool: new BN(\"130000000\"),\n    unstakeBase: new BN(\"450000000\"),\n    unstakePerPool: new BN(\"130000000\"),\n    destroy: new BN(\"50000000\"),\n  };\n\n  protected readonly stonApiClient;\n\n  public readonly gasConstants;\n\n  constructor({\n    tonApiClient,\n    stonApiClient,\n    gasConstants,\n    ...options\n  }: FarmNftItemV3Options) {\n    super(tonApiClient, options);\n\n    this.stonApiClient = stonApiClient ?? new StonApiClient(tonApiClient);\n    this.gasConstants = {\n      ...FarmNftItemV3.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createClaimRewardsBody(\n    params: {\n      queryId?: QueryIdType;\n    } & (\n      | {\n          claimAll: true;\n        }\n      | {\n          claimAll: false;\n          poolIndex: number;\n        }\n    ),\n  ): Promise<Cell> {\n    const message = new Cell();\n\n    message.bits.writeUint(FARM_OP_CODES.CLAIM_REWARDS, 32);\n    message.bits.writeUint(params.queryId ?? 0, 64);\n\n    if (params.claimAll) {\n      message.bits.writeUint(1, 1);\n      message.bits.writeUint(0, 8);\n    } else {\n      message.bits.writeUint(0, 1);\n      message.bits.writeUint(params.poolIndex, 8);\n    }\n\n    return message;\n  }\n\n  /**\n   * Build all data required to execute a `claim_rewards` transaction.\n   *\n   * @param {number | undefined} params.poolCount - Optional; Number of deployed farm reward pools; If undefined value will get onchain\n   * @param {number | undefined} params.poolIndex - Optional; farm reward pool index used for claiming; If undefined claim rewards from all pools\n   * @param {BN | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} all data required to execute a `claim_rewards` transaction.\n   */\n  public async buildClaimRewardsTxParams(params: {\n    poolCount?: number;\n    queryId?: QueryIdType;\n    poolIndex?: number;\n  }): Promise<MessageData> {\n    const to = await this.getAddress();\n\n    const payload = await this.createClaimRewardsBody({\n      queryId: params.queryId,\n      claimAll: params.poolIndex === undefined,\n      poolIndex: params.poolIndex ?? 0,\n    });\n\n    const poolCount = params.poolCount ?? (await this.getPoolCount());\n\n    const gasAmount = this.gasConstants.claimRewardsBase.add(\n      this.gasConstants.claimRewardsPerPool.muln(poolCount - 1),\n    );\n\n    return {\n      to: new Address(to.toString(true, true, true)),\n      payload,\n      gasAmount,\n    };\n  }\n\n  public async createUnstakeBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    const message = new Cell();\n\n    message.bits.writeUint(FARM_OP_CODES.UNSTAKE, 32);\n    message.bits.writeUint(params?.queryId ?? 0, 64);\n\n    return message;\n  }\n\n  /**\n   * Build all data required to execute a `unstake` transaction.\n   *\n   * @param {number | undefined} params.poolCount -  Optional; Number of deployed farm reward pools; If undefined value will get onchain\n   * @param {BN | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} all data required to execute a `unstake` transaction.\n   */\n  public async buildUnstakeTxParams(params: {\n    poolCount?: number;\n    queryId?: QueryIdType;\n  }): Promise<MessageData> {\n    const to = await this.getAddress();\n\n    const payload = await this.createUnstakeBody({\n      queryId: params.queryId,\n    });\n\n    const poolCount = params.poolCount ?? (await this.getPoolCount());\n\n    const gasAmount = this.gasConstants.unstakeBase.add(\n      this.gasConstants.unstakePerPool.muln(poolCount - 1),\n    );\n\n    return {\n      to: new Address(to.toString(true, true, true)),\n      payload,\n      gasAmount,\n    };\n  }\n\n  public async createDestroyBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return createSbtDestroyMessage({\n      queryId: params?.queryId ?? 0,\n    });\n  }\n\n  /**\n   * Build all data required to execute a `destroy` transaction.\n   *\n   * @param {BN | string | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} all data required to execute a `destroy` transaction.\n   */\n  public async buildDestroyTxParams(params?: {\n    queryId?: QueryIdType;\n  }): Promise<MessageData> {\n    const to = await this.getAddress();\n\n    const payload = await this.createDestroyBody({\n      queryId: params?.queryId,\n    });\n\n    const gasAmount = this.gasConstants.destroy;\n\n    return {\n      to: new Address(to.toString(true, true, true)),\n      payload,\n      gasAmount,\n    };\n  }\n\n  /**\n   * @returns structure containing current state of the farm NFT\n   *\n   * @property {number} status Status of the contract: uninitialized (0), active (1), unstaked (2), claiming (3), unstaked_pending (4)\n   * @property {BN} revokeTime Timestamp of unstake\n   * @property {BN} stakedTokens Amount of staked tokens\n   * @property {BN} stakeDate Timestamp in which the owner started staking\n   * @property {Map<number, BN>} claimedPerUnit `accrued_per_unit_nanorewards amounts` for each pool at the time of last claim for this user\n   * @property {Address} ownerAddress Owner address of farm nft\n   */\n  public async getFarmingData() {\n    const contractAddress = await this.getAddress();\n\n    const result = await this.provider.call2(\n      contractAddress.toString(),\n      \"get_farming_data\",\n    );\n\n    const claimedPerUnitDict = parseDictionaryUint(result[4] as Cell, 8, 150);\n    const claimedPerUnit = new Map<number, BN>();\n\n    claimedPerUnitDict.forEach((accruedPerUnitNanorewards, poolIndex) => {\n      claimedPerUnit.set(Number(poolIndex), accruedPerUnitNanorewards);\n    });\n\n    return {\n      status: (result[0] as BN).toNumber(),\n      revokeTime: result[1] as BN,\n      stakedTokens: result[2] as BN,\n      stakeDate: result[3] as BN,\n      claimedPerUnit,\n      ownerAddress: parseAddressNotNull(result[5]),\n    };\n  }\n\n  public async getPoolCount() {\n    const { collectionAddress: minterAddress } = await this.getData();\n\n    const minter = new FarmNftMinterV3({\n      tonApiClient: this.provider,\n      stonApiClient: this.stonApiClient,\n      address: minterAddress,\n    });\n\n    const { poolCount } = await minter.getData();\n\n    return poolCount;\n  }\n}\n"],"names":["Cell","BN","Address","NftItem","TonWeb","_FarmNftItemV3","tonApiClient","stonApiClient","gasConstants","options","StonApiClient","params","message","FARM_OP_CODES","to","payload","poolCount","gasAmount","createSbtDestroyMessage","contractAddress","result","claimedPerUnitDict","parseDictionaryUint","claimedPerUnit","accruedPerUnitNanorewards","poolIndex","parseAddressNotNull","minterAddress","minter","FarmNftMinterV3","FARM_VERSION","FarmNftItemV3"],"mappings":"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"}