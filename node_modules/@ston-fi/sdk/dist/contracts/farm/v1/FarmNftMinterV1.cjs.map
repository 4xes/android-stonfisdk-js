{"version":3,"file":"FarmNftMinterV1.cjs","sources":["../../../../src/contracts/farm/v1/FarmNftMinterV1.ts"],"sourcesContent":["import TonWeb, { type NftCollectionOptions } from \"tonweb\";\n\nimport type {\n  BN,\n  Cell,\n  Address,\n  AddressType,\n  QueryIdType,\n  MessageData,\n  AmountType,\n  SdkContractOptions,\n} from \"@/types\";\nimport { StonApiClient } from \"@/StonApiClient\";\nimport { parseAddressNotNull } from \"@/utils/parseAddress\";\nimport { parseBoolean } from \"@/utils/parseBoolean\";\nimport { createJettonTransferMessage } from \"@/utils/createJettonTransferMessage\";\n\nimport { FARM_OP_CODES, FARM_VERSION } from \"../constants\";\n\nconst {\n  boc: { Cell },\n  utils: { Address, BN },\n  token: {\n    nft: { NftCollection },\n    jetton: { JettonWallet },\n  },\n} = TonWeb;\n\nexport interface FarmNftMinterV1Options\n  extends SdkContractOptions,\n    NftCollectionOptions {\n  gasConstants?: Partial<typeof FarmNftMinterV1.gasConstants>;\n}\n\nexport class FarmNftMinterV1 extends NftCollection {\n  public static readonly version: FARM_VERSION = FARM_VERSION.v1;\n\n  public static readonly gasConstants = {\n    stake: new BN(\"300000000\"),\n    stakeForward: new BN(\"250000000\"),\n  };\n\n  protected readonly stonApiClient;\n\n  public readonly gasConstants;\n\n  constructor({\n    tonApiClient,\n    stonApiClient,\n    ...options\n  }: FarmNftMinterV1Options) {\n    super(tonApiClient, options);\n\n    this.stonApiClient = stonApiClient ?? new StonApiClient(tonApiClient);\n    this.gasConstants = {\n      ...FarmNftMinterV1.gasConstants,\n      ...options.gasConstants,\n    };\n  }\n\n  public async createStakeBody(): Promise<Cell> {\n    const payload = new Cell();\n\n    payload.bits.writeUint(FARM_OP_CODES.STAKE, 32);\n\n    return payload;\n  }\n\n  /**\n   * Build all data required to execute a jetton `stake` transaction\n   *\n   * @param {Address | string} params.userWalletAddress - User's address\n   * @param {Address | string} params.jettonAddress - Jetton address of token to be staked\n   * @param {BN | number} params.jettonAmount - Amount of tokens to be staked (in basic token units)\n   * @param {BN | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)\n   * @param {BN | number | string | undefined} params.forwardGasAmount - Optional; Custom transaction forward gas amount (in nanoTons)\n   * @param {BN | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} containing all data required to execute a jetton `stake` transaction\n   */\n  public async buildStakeTxParams(params: {\n    userWalletAddress: AddressType;\n    jettonAddress: AddressType;\n    jettonAmount: AmountType;\n    gasAmount?: AmountType;\n    forwardGasAmount?: AmountType;\n    queryId?: QueryIdType;\n  }): Promise<MessageData> {\n    const [jettonWalletAddress, forwardPayload, address] = await Promise.all([\n      (async () =>\n        new Address(\n          await this.stonApiClient.getJettonWalletAddress({\n            jettonAddress: params.jettonAddress.toString(),\n            ownerAddress: params.userWalletAddress.toString(),\n          }),\n        ))(),\n      this.createStakeBody(),\n      this.getAddress(),\n    ]);\n\n    const forwardTonAmount = new BN(\n      params.forwardGasAmount ?? this.gasConstants.stakeForward,\n    );\n\n    const payload = createJettonTransferMessage({\n      queryId: params.queryId ?? 0,\n      amount: params.jettonAmount,\n      destination: address,\n      responseDestination: params.userWalletAddress,\n      forwardTonAmount,\n      forwardPayload,\n    });\n\n    const gasAmount = new BN(params.gasAmount ?? this.gasConstants.stake);\n\n    return {\n      to: new Address(jettonWalletAddress.toString(true, true, true)),\n      payload,\n      gasAmount,\n    };\n  }\n\n  /**\n   * @returns structure containing current state of the minter\n   *\n   * @property {BN} nextItemIndex - Index of the next nft in this collection\n   * @property {BN} lastUpdateTime - Last time farming values were updated\n   * @property {number} status - Status of the contract: uninitialized `0`, active `1`, paused `3`\n   * @property {BN} depositedNanorewards - Deposited rewards in nanounits\n   * @property {BN} currentStakedTokens - Number of staked tokens in basic token units\n   * @property {BN} accruedPerUnitNanorewards - Number of accrued nanorewards per basic stake token unit\n   * @property {BN} accruedNanorewards - Total number of accrued rewards in nanounits\n   * @property {BN} claimedNanorewards - Number of claimed rewards in nanounits\n   * @property {BN} contractUniqueId - Minter id\n   * @property {BN} nanorewardsPer24h - Total number of accrued rewards per 24h in nanounits\n   * @property {boolean} soulboundItems - Whether minted NFTs are soulbound\n   * @property {BN} minStakeTime - Minimum staking time\n   * @property {Address} stakingTokenWallet - Minter's staking jetton wallet\n   * @property {Address} rewardTokenWallet - Minter's reward jetton wallet\n   */\n  public async getData() {\n    const contractAddress = await this.getAddress();\n\n    const result = await this.provider.call2(\n      contractAddress.toString(),\n      \"get_farming_minter_data\",\n    );\n\n    return {\n      nextItemIndex: result[0] as BN,\n      lastUpdateTime: result[1] as BN,\n      status: (result[2] as BN).toNumber(),\n      depositedNanorewards: result[3] as BN,\n      currentStakedTokens: result[4] as BN,\n      accruedPerUnitNanorewards: result[5] as BN,\n      accruedNanorewards: result[6] as BN,\n      claimedNanorewards: result[7] as BN,\n      contractUniqueId: result[8] as BN,\n      nanorewardsPer24h: result[9] as BN,\n      soulboundItems: parseBoolean(result[10]),\n      minStakeTime: result[11] as BN,\n      stakingTokenWallet: parseAddressNotNull(result[12]),\n      rewardTokenWallet: parseAddressNotNull(result[13]),\n    };\n  }\n\n  /**\n   * @returns {Address} address of minter for staking jetton that is used for farming\n   */\n  public async getStakingJettonAddress(): Promise<Address> {\n    const { stakingTokenWallet } = await this.getData();\n\n    const jettonWallet = new JettonWallet(this.provider, {\n      address: stakingTokenWallet,\n    });\n\n    const { jettonMinterAddress } = await jettonWallet.getData();\n\n    return jettonMinterAddress;\n  }\n}\n"],"names":["Cell","Address","BN","NftCollection","JettonWallet","TonWeb","_FarmNftMinterV1","tonApiClient","stonApiClient","options","StonApiClient","payload","FARM_OP_CODES","params","jettonWalletAddress","forwardPayload","address","forwardTonAmount","createJettonTransferMessage","gasAmount","contractAddress","result","parseBoolean","parseAddressNotNull","stakingTokenWallet","jettonWallet","jettonMinterAddress","FARM_VERSION","FarmNftMinterV1"],"mappings":"sUAmBM,CACJ,IAAK,CAAE,KAAAA,CAAK,EACZ,MAAO,CAAE,QAAAC,EAAS,GAAAC,CAAG,EACrB,MAAO,CACL,IAAK,CAAE,cAAAC,CAAc,EACrB,OAAQ,CAAE,aAAAC,CAAa,CACzB,CACF,EAAIC,EAQSC,EAAN,MAAMA,UAAwBH,CAAc,CAYjD,YAAY,CACV,aAAAI,EACA,cAAAC,EACA,GAAGC,CAAA,EACsB,CACzB,MAAMF,EAAcE,CAAO,EAE3B,KAAK,cAAgBD,GAAiB,IAAIE,EAAA,cAAcH,CAAY,EACpE,KAAK,aAAe,CAClB,GAAGD,EAAgB,aACnB,GAAGG,EAAQ,YAAA,CAEf,CAEA,MAAa,iBAAiC,CACtC,MAAAE,EAAU,IAAIX,EAEpB,OAAAW,EAAQ,KAAK,UAAUC,EAAc,cAAA,MAAO,EAAE,EAEvCD,CACT,CAcA,MAAa,mBAAmBE,EAOP,CACvB,KAAM,CAACC,EAAqBC,EAAgBC,CAAO,EAAI,MAAM,QAAQ,IAAI,EACtE,SACC,IAAIf,EACF,MAAM,KAAK,cAAc,uBAAuB,CAC9C,cAAeY,EAAO,cAAc,SAAS,EAC7C,aAAcA,EAAO,kBAAkB,SAAS,CAAA,CACjD,CAAA,GACA,EACL,KAAK,gBAAgB,EACrB,KAAK,WAAW,CAAA,CACjB,EAEKI,EAAmB,IAAIf,EAC3BW,EAAO,kBAAoB,KAAK,aAAa,YAAA,EAGzCF,EAAUO,EAAAA,4BAA4B,CAC1C,QAASL,EAAO,SAAW,EAC3B,OAAQA,EAAO,aACf,YAAaG,EACb,oBAAqBH,EAAO,kBAC5B,iBAAAI,EACA,eAAAF,CAAA,CACD,EAEKI,EAAY,IAAIjB,EAAGW,EAAO,WAAa,KAAK,aAAa,KAAK,EAE7D,MAAA,CACL,GAAI,IAAIZ,EAAQa,EAAoB,SAAS,GAAM,GAAM,EAAI,CAAC,EAC9D,QAAAH,EACA,UAAAQ,CAAA,CAEJ,CAoBA,MAAa,SAAU,CACf,MAAAC,EAAkB,MAAM,KAAK,aAE7BC,EAAS,MAAM,KAAK,SAAS,MACjCD,EAAgB,SAAS,EACzB,yBAAA,EAGK,MAAA,CACL,cAAeC,EAAO,CAAC,EACvB,eAAgBA,EAAO,CAAC,EACxB,OAASA,EAAO,CAAC,EAAS,SAAS,EACnC,qBAAsBA,EAAO,CAAC,EAC9B,oBAAqBA,EAAO,CAAC,EAC7B,0BAA2BA,EAAO,CAAC,EACnC,mBAAoBA,EAAO,CAAC,EAC5B,mBAAoBA,EAAO,CAAC,EAC5B,iBAAkBA,EAAO,CAAC,EAC1B,kBAAmBA,EAAO,CAAC,EAC3B,eAAgBC,EAAA,aAAaD,EAAO,EAAE,CAAC,EACvC,aAAcA,EAAO,EAAE,EACvB,mBAAoBE,EAAA,oBAAoBF,EAAO,EAAE,CAAC,EAClD,kBAAmBE,EAAA,oBAAoBF,EAAO,EAAE,CAAC,CAAA,CAErD,CAKA,MAAa,yBAA4C,CACvD,KAAM,CAAE,mBAAAG,CAAuB,EAAA,MAAM,KAAK,QAAQ,EAE5CC,EAAe,IAAIrB,EAAa,KAAK,SAAU,CACnD,QAASoB,CAAA,CACV,EAEK,CAAE,oBAAAE,CAAwB,EAAA,MAAMD,EAAa,QAAQ,EAEpD,OAAAC,CACT,CACF,EAlJapB,EACY,QAAwBqB,EAAa,aAAA,GADjDrB,EAGY,aAAe,CACpC,MAAO,IAAIJ,EAAG,WAAW,EACzB,aAAc,IAAIA,EAAG,WAAW,CAClC,EANK,IAAM0B,EAANtB"}