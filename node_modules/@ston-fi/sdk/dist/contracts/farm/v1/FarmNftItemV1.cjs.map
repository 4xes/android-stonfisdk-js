{"version":3,"file":"FarmNftItemV1.cjs","sources":["../../../../src/contracts/farm/v1/FarmNftItemV1.ts"],"sourcesContent":["import TonWeb, { type NftItemOptions } from \"tonweb\";\n\nimport type {\n  BN,\n  Cell,\n  QueryIdType,\n  MessageData,\n  SdkContractOptions,\n  AmountType,\n} from \"@/types\";\nimport { StonApiClient } from \"@/StonApiClient\";\nimport { parseBoolean } from \"@/utils/parseBoolean\";\n\nimport { FARM_OP_CODES, FARM_VERSION } from \"../constants\";\n\nconst {\n  boc: { Cell },\n  utils: { BN, Address },\n  token: {\n    nft: { NftItem },\n  },\n} = TonWeb;\n\nexport interface FarmNftItemV1Options\n  extends SdkContractOptions,\n    NftItemOptions {\n  gasConstants?: Partial<typeof FarmNftItemV1.gasConstants>;\n}\n\nexport class FarmNftItemV1 extends NftItem {\n  public static readonly version: FARM_VERSION = FARM_VERSION.v1;\n\n  public static readonly gasConstants = {\n    claimRewards: new BN(\"300000000\"),\n    unstake: new BN(\"400000000\"),\n    destroy: new BN(\"50000000\"),\n  };\n\n  protected readonly stonApiClient;\n\n  public readonly gasConstants;\n\n  constructor({\n    tonApiClient,\n    stonApiClient,\n    gasConstants,\n    ...options\n  }: FarmNftItemV1Options) {\n    super(tonApiClient, options);\n\n    this.stonApiClient = stonApiClient ?? new StonApiClient(tonApiClient);\n    this.gasConstants = {\n      ...FarmNftItemV1.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createClaimRewardsBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    const message = new Cell();\n\n    message.bits.writeUint(FARM_OP_CODES.CLAIM_REWARDS, 32);\n    message.bits.writeUint(params?.queryId ?? 0, 64);\n\n    return message;\n  }\n\n  /**\n   * Build all data required to execute a `claim_rewards` transaction.\n   *\n   * @param {BN | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)\n   * @param {BN | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} all data required to execute a `claim_rewards` transaction.\n   */\n  public async buildClaimRewardsTxParams(params?: {\n    gasAmount?: AmountType;\n    queryId?: QueryIdType;\n  }): Promise<MessageData> {\n    const to = await this.getAddress();\n\n    const payload = await this.createClaimRewardsBody({\n      queryId: params?.queryId,\n    });\n\n    const gasAmount = new BN(\n      params?.gasAmount ?? this.gasConstants.claimRewards,\n    );\n\n    return {\n      to: new Address(to.toString(true, true, true)),\n      payload,\n      gasAmount,\n    };\n  }\n\n  public async createUnstakeBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    const message = new Cell();\n\n    message.bits.writeUint(FARM_OP_CODES.UNSTAKE, 32);\n    message.bits.writeUint(params?.queryId ?? 0, 64);\n\n    return message;\n  }\n\n  /**\n   * Build all data required to execute a `unstake` transaction.\n   *\n   * @param {BN | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)\n   * @param {BN | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} all data required to execute a `unstake` transaction.\n   */\n  public async buildUnstakeTxParams(params?: {\n    gasAmount?: AmountType;\n    queryId?: QueryIdType;\n  }): Promise<MessageData> {\n    const to = await this.getAddress();\n\n    const payload = await this.createUnstakeBody({\n      queryId: params?.queryId,\n    });\n\n    const gasAmount = new BN(params?.gasAmount ?? this.gasConstants.unstake);\n\n    return {\n      to: new Address(to.toString(true, true, true)),\n\n      payload,\n      gasAmount,\n    };\n  }\n\n  /**\n   * @returns structure containing current state of the farm NFT\n   *\n   * @property {number} status Status of the contract: uninitialized `0`, active `1`, unstaked `2`, claiming `3`\n   * @property {boolean} isSoulbound If nft is soulbound\n   * @property {BN} stakedTokens Amount of staked tokens\n   * @property {BN} claimedPerUnitNanorewards `accrued_per_unit_nanorewards` at the time the user made the stake or last claimed rewards\n   */\n  public async getFarmingData() {\n    const contractAddress = await this.getAddress();\n\n    const result = await this.provider.call2(\n      contractAddress.toString(),\n      \"get_farming_data\",\n    );\n\n    return {\n      status: (result[0] as BN).toNumber(),\n      isSoulbound: parseBoolean(result[1]),\n      stakedTokens: result[2] as BN,\n      claimedPerUnitNanorewards: result[3] as BN,\n    };\n  }\n}\n"],"names":["Cell","BN","Address","NftItem","TonWeb","_FarmNftItemV1","tonApiClient","stonApiClient","gasConstants","options","StonApiClient","params","message","FARM_OP_CODES","to","payload","gasAmount","contractAddress","result","parseBoolean","FARM_VERSION","FarmNftItemV1"],"mappings":"6NAeM,CACJ,IAAK,CAAE,KAAAA,CAAK,EACZ,MAAO,CAAE,GAAAC,EAAI,QAAAC,CAAQ,EACrB,MAAO,CACL,IAAK,CAAE,QAAAC,CAAQ,CACjB,CACF,EAAIC,EAQSC,EAAN,MAAMA,UAAsBF,CAAQ,CAazC,YAAY,CACV,aAAAG,EACA,cAAAC,EACA,aAAAC,EACA,GAAGC,CAAA,EACoB,CACvB,MAAMH,EAAcG,CAAO,EAE3B,KAAK,cAAgBF,GAAiB,IAAIG,EAAA,cAAcJ,CAAY,EACpE,KAAK,aAAe,CAClB,GAAGD,EAAc,aACjB,GAAGG,CAAA,CAEP,CAEA,MAAa,uBAAuBG,EAElB,CACV,MAAAC,EAAU,IAAIZ,EAEpB,OAAAY,EAAQ,KAAK,UAAUC,EAAc,cAAA,cAAe,EAAE,EACtDD,EAAQ,KAAK,WAAUD,GAAA,YAAAA,EAAQ,UAAW,EAAG,EAAE,EAExCC,CACT,CAUA,MAAa,0BAA0BD,EAGd,CACjB,MAAAG,EAAK,MAAM,KAAK,aAEhBC,EAAU,MAAM,KAAK,uBAAuB,CAChD,QAASJ,GAAA,YAAAA,EAAQ,OAAA,CAClB,EAEKK,EAAY,IAAIf,GACpBU,GAAA,YAAAA,EAAQ,YAAa,KAAK,aAAa,YAAA,EAGlC,MAAA,CACL,GAAI,IAAIT,EAAQY,EAAG,SAAS,GAAM,GAAM,EAAI,CAAC,EAC7C,QAAAC,EACA,UAAAC,CAAA,CAEJ,CAEA,MAAa,kBAAkBL,EAEb,CACV,MAAAC,EAAU,IAAIZ,EAEpB,OAAAY,EAAQ,KAAK,UAAUC,EAAc,cAAA,QAAS,EAAE,EAChDD,EAAQ,KAAK,WAAUD,GAAA,YAAAA,EAAQ,UAAW,EAAG,EAAE,EAExCC,CACT,CAUA,MAAa,qBAAqBD,EAGT,CACjB,MAAAG,EAAK,MAAM,KAAK,aAEhBC,EAAU,MAAM,KAAK,kBAAkB,CAC3C,QAASJ,GAAA,YAAAA,EAAQ,OAAA,CAClB,EAEKK,EAAY,IAAIf,GAAGU,GAAA,YAAAA,EAAQ,YAAa,KAAK,aAAa,OAAO,EAEhE,MAAA,CACL,GAAI,IAAIT,EAAQY,EAAG,SAAS,GAAM,GAAM,EAAI,CAAC,EAE7C,QAAAC,EACA,UAAAC,CAAA,CAEJ,CAUA,MAAa,gBAAiB,CACtB,MAAAC,EAAkB,MAAM,KAAK,aAE7BC,EAAS,MAAM,KAAK,SAAS,MACjCD,EAAgB,SAAS,EACzB,kBAAA,EAGK,MAAA,CACL,OAASC,EAAO,CAAC,EAAS,SAAS,EACnC,YAAaC,EAAA,aAAaD,EAAO,CAAC,CAAC,EACnC,aAAcA,EAAO,CAAC,EACtB,0BAA2BA,EAAO,CAAC,CAAA,CAEvC,CACF,EAlIab,EACY,QAAwBe,EAAa,aAAA,GADjDf,EAGY,aAAe,CACpC,aAAc,IAAIJ,EAAG,WAAW,EAChC,QAAS,IAAIA,EAAG,WAAW,EAC3B,QAAS,IAAIA,EAAG,UAAU,CAC5B,EAPK,IAAMoB,EAANhB"}