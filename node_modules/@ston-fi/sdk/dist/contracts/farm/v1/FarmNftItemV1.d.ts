import { type NftItemOptions } from "tonweb";
import type { Cell, QueryIdType, MessageData, SdkContractOptions, AmountType } from '../../../types';
import { FARM_VERSION } from "../constants";
declare const Cell: typeof import("tonweb/dist/types/boc/cell").Cell, NftItem: typeof import("tonweb/dist/types/contract/token/nft/nft-item").NftItem;
export interface FarmNftItemV1Options extends SdkContractOptions, NftItemOptions {
    gasConstants?: Partial<typeof FarmNftItemV1.gasConstants>;
}
export declare class FarmNftItemV1 extends NftItem {
    static readonly version: FARM_VERSION;
    static readonly gasConstants: {
        claimRewards: import("bn.js");
        unstake: import("bn.js");
        destroy: import("bn.js");
    };
    protected readonly stonApiClient: import('../../../types').StonApiClient;
    readonly gasConstants: {
        claimRewards: import("bn.js");
        unstake: import("bn.js");
        destroy: import("bn.js");
    };
    constructor({ tonApiClient, stonApiClient, gasConstants, ...options }: FarmNftItemV1Options);
    createClaimRewardsBody(params?: {
        queryId?: QueryIdType;
    }): Promise<Cell>;
    /**
     * Build all data required to execute a `claim_rewards` transaction.
     *
     * @param {BN | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)
     * @param {BN | number | undefined} params.queryId - Optional; query id
     *
     * @returns {MessageData} all data required to execute a `claim_rewards` transaction.
     */
    buildClaimRewardsTxParams(params?: {
        gasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<MessageData>;
    createUnstakeBody(params?: {
        queryId?: QueryIdType;
    }): Promise<Cell>;
    /**
     * Build all data required to execute a `unstake` transaction.
     *
     * @param {BN | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)
     * @param {BN | number | undefined} params.queryId - Optional; query id
     *
     * @returns {MessageData} all data required to execute a `unstake` transaction.
     */
    buildUnstakeTxParams(params?: {
        gasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<MessageData>;
    /**
     * @returns structure containing current state of the farm NFT
     *
     * @property {number} status Status of the contract: uninitialized `0`, active `1`, unstaked `2`, claiming `3`
     * @property {boolean} isSoulbound If nft is soulbound
     * @property {BN} stakedTokens Amount of staked tokens
     * @property {BN} claimedPerUnitNanorewards `accrued_per_unit_nanorewards` at the time the user made the stake or last claimed rewards
     */
    getFarmingData(): Promise<{
        status: number;
        isSoulbound: boolean;
        stakedTokens: import("bn.js");
        claimedPerUnitNanorewards: import("bn.js");
    }>;
}
export {};
