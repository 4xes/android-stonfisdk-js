{"version":3,"file":"FarmNftItemV1.js","sources":["../../../../src/contracts/farm/v1/FarmNftItemV1.ts"],"sourcesContent":["import TonWeb, { type NftItemOptions } from \"tonweb\";\n\nimport type {\n  BN,\n  Cell,\n  QueryIdType,\n  MessageData,\n  SdkContractOptions,\n  AmountType,\n} from \"@/types\";\nimport { StonApiClient } from \"@/StonApiClient\";\nimport { parseBoolean } from \"@/utils/parseBoolean\";\n\nimport { FARM_OP_CODES, FARM_VERSION } from \"../constants\";\n\nconst {\n  boc: { Cell },\n  utils: { BN, Address },\n  token: {\n    nft: { NftItem },\n  },\n} = TonWeb;\n\nexport interface FarmNftItemV1Options\n  extends SdkContractOptions,\n    NftItemOptions {\n  gasConstants?: Partial<typeof FarmNftItemV1.gasConstants>;\n}\n\nexport class FarmNftItemV1 extends NftItem {\n  public static readonly version: FARM_VERSION = FARM_VERSION.v1;\n\n  public static readonly gasConstants = {\n    claimRewards: new BN(\"300000000\"),\n    unstake: new BN(\"400000000\"),\n    destroy: new BN(\"50000000\"),\n  };\n\n  protected readonly stonApiClient;\n\n  public readonly gasConstants;\n\n  constructor({\n    tonApiClient,\n    stonApiClient,\n    gasConstants,\n    ...options\n  }: FarmNftItemV1Options) {\n    super(tonApiClient, options);\n\n    this.stonApiClient = stonApiClient ?? new StonApiClient(tonApiClient);\n    this.gasConstants = {\n      ...FarmNftItemV1.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createClaimRewardsBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    const message = new Cell();\n\n    message.bits.writeUint(FARM_OP_CODES.CLAIM_REWARDS, 32);\n    message.bits.writeUint(params?.queryId ?? 0, 64);\n\n    return message;\n  }\n\n  /**\n   * Build all data required to execute a `claim_rewards` transaction.\n   *\n   * @param {BN | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)\n   * @param {BN | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} all data required to execute a `claim_rewards` transaction.\n   */\n  public async buildClaimRewardsTxParams(params?: {\n    gasAmount?: AmountType;\n    queryId?: QueryIdType;\n  }): Promise<MessageData> {\n    const to = await this.getAddress();\n\n    const payload = await this.createClaimRewardsBody({\n      queryId: params?.queryId,\n    });\n\n    const gasAmount = new BN(\n      params?.gasAmount ?? this.gasConstants.claimRewards,\n    );\n\n    return {\n      to: new Address(to.toString(true, true, true)),\n      payload,\n      gasAmount,\n    };\n  }\n\n  public async createUnstakeBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    const message = new Cell();\n\n    message.bits.writeUint(FARM_OP_CODES.UNSTAKE, 32);\n    message.bits.writeUint(params?.queryId ?? 0, 64);\n\n    return message;\n  }\n\n  /**\n   * Build all data required to execute a `unstake` transaction.\n   *\n   * @param {BN | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)\n   * @param {BN | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} all data required to execute a `unstake` transaction.\n   */\n  public async buildUnstakeTxParams(params?: {\n    gasAmount?: AmountType;\n    queryId?: QueryIdType;\n  }): Promise<MessageData> {\n    const to = await this.getAddress();\n\n    const payload = await this.createUnstakeBody({\n      queryId: params?.queryId,\n    });\n\n    const gasAmount = new BN(params?.gasAmount ?? this.gasConstants.unstake);\n\n    return {\n      to: new Address(to.toString(true, true, true)),\n\n      payload,\n      gasAmount,\n    };\n  }\n\n  /**\n   * @returns structure containing current state of the farm NFT\n   *\n   * @property {number} status Status of the contract: uninitialized `0`, active `1`, unstaked `2`, claiming `3`\n   * @property {boolean} isSoulbound If nft is soulbound\n   * @property {BN} stakedTokens Amount of staked tokens\n   * @property {BN} claimedPerUnitNanorewards `accrued_per_unit_nanorewards` at the time the user made the stake or last claimed rewards\n   */\n  public async getFarmingData() {\n    const contractAddress = await this.getAddress();\n\n    const result = await this.provider.call2(\n      contractAddress.toString(),\n      \"get_farming_data\",\n    );\n\n    return {\n      status: (result[0] as BN).toNumber(),\n      isSoulbound: parseBoolean(result[1]),\n      stakedTokens: result[2] as BN,\n      claimedPerUnitNanorewards: result[3] as BN,\n    };\n  }\n}\n"],"names":["Cell","BN","Address","NftItem","TonWeb","_FarmNftItemV1","tonApiClient","stonApiClient","gasConstants","options","StonApiClient","params","message","FARM_OP_CODES","to","payload","gasAmount","contractAddress","result","parseBoolean","FARM_VERSION","FarmNftItemV1"],"mappings":";;;;AAeA,MAAM;AAAA,EACJ,KAAK,EAAE,MAAAA,EAAK;AAAA,EACZ,OAAO,EAAE,IAAAC,GAAI,SAAAC,EAAQ;AAAA,EACrB,OAAO;AAAA,IACL,KAAK,EAAE,SAAAC,EAAQ;AAAA,EACjB;AACF,IAAIC,GAQSC,IAAN,MAAMA,UAAsBF,EAAQ;AAAA,EAazC,YAAY;AAAA,IACV,cAAAG;AAAA,IACA,eAAAC;AAAA,IACA,cAAAC;AAAA,IACA,GAAGC;AAAA,EAAA,GACoB;AACvB,UAAMH,GAAcG,CAAO,GAE3B,KAAK,gBAAgBF,KAAiB,IAAIG,EAAcJ,CAAY,GACpE,KAAK,eAAe;AAAA,MAClB,GAAGD,EAAc;AAAA,MACjB,GAAGG;AAAA,IAAA;AAAA,EAEP;AAAA,EAEA,MAAa,uBAAuBG,GAElB;AACV,UAAAC,IAAU,IAAIZ;AAEpB,WAAAY,EAAQ,KAAK,UAAUC,EAAc,eAAe,EAAE,GACtDD,EAAQ,KAAK,WAAUD,KAAA,gBAAAA,EAAQ,YAAW,GAAG,EAAE,GAExCC;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,0BAA0BD,GAGd;AACjB,UAAAG,IAAK,MAAM,KAAK,cAEhBC,IAAU,MAAM,KAAK,uBAAuB;AAAA,MAChD,SAASJ,KAAA,gBAAAA,EAAQ;AAAA,IAAA,CAClB,GAEKK,IAAY,IAAIf;AAAA,OACpBU,KAAA,gBAAAA,EAAQ,cAAa,KAAK,aAAa;AAAA,IAAA;AAGlC,WAAA;AAAA,MACL,IAAI,IAAIT,EAAQY,EAAG,SAAS,IAAM,IAAM,EAAI,CAAC;AAAA,MAC7C,SAAAC;AAAA,MACA,WAAAC;AAAA,IAAA;AAAA,EAEJ;AAAA,EAEA,MAAa,kBAAkBL,GAEb;AACV,UAAAC,IAAU,IAAIZ;AAEpB,WAAAY,EAAQ,KAAK,UAAUC,EAAc,SAAS,EAAE,GAChDD,EAAQ,KAAK,WAAUD,KAAA,gBAAAA,EAAQ,YAAW,GAAG,EAAE,GAExCC;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,qBAAqBD,GAGT;AACjB,UAAAG,IAAK,MAAM,KAAK,cAEhBC,IAAU,MAAM,KAAK,kBAAkB;AAAA,MAC3C,SAASJ,KAAA,gBAAAA,EAAQ;AAAA,IAAA,CAClB,GAEKK,IAAY,IAAIf,GAAGU,KAAA,gBAAAA,EAAQ,cAAa,KAAK,aAAa,OAAO;AAEhE,WAAA;AAAA,MACL,IAAI,IAAIT,EAAQY,EAAG,SAAS,IAAM,IAAM,EAAI,CAAC;AAAA,MAE7C,SAAAC;AAAA,MACA,WAAAC;AAAA,IAAA;AAAA,EAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,iBAAiB;AACtB,UAAAC,IAAkB,MAAM,KAAK,cAE7BC,IAAS,MAAM,KAAK,SAAS;AAAA,MACjCD,EAAgB,SAAS;AAAA,MACzB;AAAA,IAAA;AAGK,WAAA;AAAA,MACL,QAASC,EAAO,CAAC,EAAS,SAAS;AAAA,MACnC,aAAaC,EAAaD,EAAO,CAAC,CAAC;AAAA,MACnC,cAAcA,EAAO,CAAC;AAAA,MACtB,2BAA2BA,EAAO,CAAC;AAAA,IAAA;AAAA,EAEvC;AACF;AAlIab,EACY,UAAwBe,EAAa;AADjDf,EAGY,eAAe;AAAA,EACpC,cAAc,IAAIJ,EAAG,WAAW;AAAA,EAChC,SAAS,IAAIA,EAAG,WAAW;AAAA,EAC3B,SAAS,IAAIA,EAAG,UAAU;AAC5B;AAPK,IAAMoB,IAANhB;"}