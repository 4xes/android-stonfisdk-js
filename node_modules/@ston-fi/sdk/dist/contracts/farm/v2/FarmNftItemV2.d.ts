import type { Cell, QueryIdType, MessageData, AmountType } from '../../../types';
import { FarmNftItemV1, type FarmNftItemV1Options } from "../v1/FarmNftItemV1";
declare const Cell: typeof import("tonweb/dist/types/boc/cell").Cell;
export interface FarmNftItemV2Options extends FarmNftItemV1Options {
}
export declare class FarmNftItemV2 extends FarmNftItemV1 {
    static version: "v2";
    createDestroyBody(params?: {
        queryId?: QueryIdType;
    }): Promise<Cell>;
    /**
     * Build all data required to execute a `destroy` transaction.
     *
     * @param {BN | number | string | undefined} params.gasAmount - Optional; amount of gas for the transaction (in nanoTons)
     * @param {BN | number | undefined} params.queryId - Optional; query id
     *
     * @returns {MessageData} all data required to execute a `destroy` transaction.
     */
    buildDestroyTxParams(params?: {
        gasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<MessageData>;
    /**
     * @returns structure containing current state of the farm NFT
     *
     * @property {number} status Status of the contract: uninitialized `0`, active `1`, unstaked `2`, claiming `3`
     * @property {BN} revokeTime Timestamp of unstake
     * @property {BN} stakedTokens Amount of staked tokens
     * @property {BN} claimedPerUnitNanorewards `accrued_per_unit_nanorewards` at the time the user made the stake or last claimed rewards
     * @property {BN} stakeDate Timestamp in which the owner started staking
     * @property {boolean} isSoulbound If nft is soulbound; Always true in V2
     */
    getFarmingData(): Promise<{
        status: number;
        revokeTime: import("bn.js");
        stakedTokens: import("bn.js");
        claimedPerUnitNanorewards: import("bn.js");
        stakeDate: import("bn.js");
        isSoulbound: boolean;
    }>;
}
export {};
