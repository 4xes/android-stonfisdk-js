{"version":3,"file":"FarmNftItemV2.cjs","sources":["../../../../src/contracts/farm/v2/FarmNftItemV2.ts"],"sourcesContent":["import TonWeb from \"tonweb\";\n\nimport type { BN, Cell, QueryIdType, MessageData, AmountType } from \"@/types\";\nimport { createSbtDestroyMessage } from \"@/utils\";\n\nimport { FARM_VERSION } from \"../constants\";\nimport { FarmNftItemV1, type FarmNftItemV1Options } from \"../v1/FarmNftItemV1\";\n\nconst {\n  boc: { Cell },\n  utils: { BN, Address },\n} = TonWeb;\n\nexport interface FarmNftItemV2Options extends FarmNftItemV1Options {}\n\nexport class FarmNftItemV2 extends FarmNftItemV1 {\n  public static version = FARM_VERSION.v2;\n\n  public async createDestroyBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return createSbtDestroyMessage({\n      queryId: params?.queryId ?? 0,\n    });\n  }\n\n  /**\n   * Build all data required to execute a `destroy` transaction.\n   *\n   * @param {BN | number | string | undefined} params.gasAmount - Optional; amount of gas for the transaction (in nanoTons)\n   * @param {BN | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {MessageData} all data required to execute a `destroy` transaction.\n   */\n  public async buildDestroyTxParams(params?: {\n    gasAmount?: AmountType;\n    queryId?: QueryIdType;\n  }): Promise<MessageData> {\n    const to = await this.getAddress();\n\n    const payload = await this.createDestroyBody({ queryId: params?.queryId });\n\n    const gasAmount = new BN(params?.gasAmount ?? this.gasConstants.destroy);\n\n    return {\n      to: new Address(to.toString(true, true, true)),\n      payload,\n      gasAmount,\n    };\n  }\n\n  /**\n   * @returns structure containing current state of the farm NFT\n   *\n   * @property {number} status Status of the contract: uninitialized `0`, active `1`, unstaked `2`, claiming `3`\n   * @property {BN} revokeTime Timestamp of unstake\n   * @property {BN} stakedTokens Amount of staked tokens\n   * @property {BN} claimedPerUnitNanorewards `accrued_per_unit_nanorewards` at the time the user made the stake or last claimed rewards\n   * @property {BN} stakeDate Timestamp in which the owner started staking\n   * @property {boolean} isSoulbound If nft is soulbound; Always true in V2\n   */\n  public override async getFarmingData() {\n    const contractAddress = await this.getAddress();\n\n    const result = await this.provider.call2(\n      contractAddress.toString(),\n      \"get_farming_data\",\n    );\n\n    return {\n      status: (result[0] as BN).toNumber(),\n      revokeTime: result[1] as BN,\n      stakedTokens: result[2] as BN,\n      claimedPerUnitNanorewards: result[3] as BN,\n      stakeDate: result[4] as BN,\n      isSoulbound: true, // NFTs are always soulbound in V2\n    };\n  }\n}\n"],"names":["Cell","BN","Address","TonWeb","FarmNftItemV2","FarmNftItemV1","params","createSbtDestroyMessage","to","payload","gasAmount","contractAddress","result","FARM_VERSION"],"mappings":"qOAQM,CACJ,IAAK,CAAE,KAAAA,CAAK,EACZ,MAAO,CAAE,GAAAC,EAAI,QAAAC,CAAQ,CACvB,EAAIC,EAIG,MAAMC,UAAsBC,EAAAA,aAAc,CAG/C,MAAa,kBAAkBC,EAEb,CAChB,OAAOC,0BAAwB,CAC7B,SAASD,GAAA,YAAAA,EAAQ,UAAW,CAAA,CAC7B,CACH,CAUA,MAAa,qBAAqBA,EAGT,CACjB,MAAAE,EAAK,MAAM,KAAK,aAEhBC,EAAU,MAAM,KAAK,kBAAkB,CAAE,QAASH,GAAA,YAAAA,EAAQ,QAAS,EAEnEI,EAAY,IAAIT,GAAGK,GAAA,YAAAA,EAAQ,YAAa,KAAK,aAAa,OAAO,EAEhE,MAAA,CACL,GAAI,IAAIJ,EAAQM,EAAG,SAAS,GAAM,GAAM,EAAI,CAAC,EAC7C,QAAAC,EACA,UAAAC,CAAA,CAEJ,CAYA,MAAsB,gBAAiB,CAC/B,MAAAC,EAAkB,MAAM,KAAK,aAE7BC,EAAS,MAAM,KAAK,SAAS,MACjCD,EAAgB,SAAS,EACzB,kBAAA,EAGK,MAAA,CACL,OAASC,EAAO,CAAC,EAAS,SAAS,EACnC,WAAYA,EAAO,CAAC,EACpB,aAAcA,EAAO,CAAC,EACtB,0BAA2BA,EAAO,CAAC,EACnC,UAAWA,EAAO,CAAC,EACnB,YAAa,EAAA,CAEjB,CACF,CA/DaR,EACG,QAAUS,EAAAA,aAAa"}