import "tonweb";
import { parseAddress as a, parseAddressNotNull as s } from "../../../utils/parseAddress.js";
import { parseBoolean as r } from "../../../utils/parseBoolean.js";
import { parseString as n } from "../../../utils/parseString.js";
import { FARM_VERSION as o } from "../constants.js";
import { FarmNftMinterV1 as d } from "../v1/FarmNftMinterV1.js";
class i extends d {
  /**
   * @returns structure containing pending data
   *
   * @property {BN} changeCustodianTs - Timestamp when 'change_custodian' was initiated
   * @property {BN} sendMsgTs - Timestamp when 'send_raw_msg' was initiated
   * @property {BN} codeUpgradeTs - Timestamp when 'code_upgrade' was initiated
   * @property {Address} newCustodian - New custodian that will be set after confirmation
   * @property {Cell} pendingMsg - Pending msg that will be sends after confirmation
   * @property {Cell} newCode - New contract code that will be set after confirmation
   * @property {Cell} newStorage - New contract storage that will be set after confirmation
   */
  async getPendingData() {
    const t = await this.getAddress(), e = await this.provider.call2(
      t.toString(),
      "get_pending_data"
    );
    return {
      changeCustodianTs: e[0],
      sendMsgTs: e[1],
      codeUpgradeTs: e[2],
      newCustodian: a(e[3]),
      pendingMsg: e[4],
      newCode: e[5],
      newStorage: e[6]
    };
  }
  /**
   * @returns structure containing version data
   *
   * @property {number} major - Major version; breaking changes in api
   * @property {number} minor - Minor version; non-breaking new functionality
   * @property {string} development - Development version; can contain breaking changes
   */
  async getVersion() {
    const t = await this.getAddress(), e = await this.provider.call2(
      t.toString(),
      "get_version"
    );
    return {
      major: e[0].toNumber(),
      minor: e[1].toNumber(),
      development: n(e[2])
    };
  }
  /**
   * @returns structure containing current state of the minter
   *
   * @property {BN} nextItemIndex - Index of the next nft in this collection
   * @property {BN} lastUpdateTime - Last time farming values were updated
   * @property {number} status - Status of the contract: uninitialized `0`, active `1`, paused `3`
   * @property {BN} depositedNanorewards - Deposited rewards in nanounits
   * @property {BN} currentStakedTokens - Number of staked tokens in basic token units
   * @property {BN} accruedPerUnitNanorewards - Number of accrued nanorewards per basic stake token unit
   * @property {BN} claimedFeeNanorewards - Claimed fees
   * @property {BN} accruedFeeNanorewards - Accrued fees
   * @property {BN} accruedNanorewards - Total number of accrued rewards in nanounits
   * @property {BN} claimedNanorewards - Number of claimed rewards in nanounits
   * @property {BN} contractUniqueId - Minter id
   * @property {BN} nanorewardsPer24h - Total number of accrued rewards per 24h in nanounits
   * @property {BN} adminFee - Admin fee; divider is 10000
   * @property {BN} minStakeTime - Minimum staking time
   * @property {Address} stakingTokenWallet - Minter's staking jetton wallet
   * @property {Address} rewardTokenWallet - Minter's reward jetton wallet
   * @property {Address} custodianAddress - Custodian address
   * @property {boolean} canChangeCustodian - If can change custodian
   * @property {boolean} canSendRawMsg - If can send raw msg
   * @property {boolean} canChangeFee - If can change fee
   * @property {boolean} unrestrictedDepositRewards - If rewards can be deposited by anyone
   * @property {boolean} soulboundItems - Whether minted NFTs are soulbound; Always true in V2
   */
  async getData() {
    const t = await this.getAddress(), e = await this.provider.call2(
      t.toString(),
      "get_farming_minter_data"
    );
    return {
      nextItemIndex: e[0],
      lastUpdateTime: e[1],
      status: e[2].toNumber(),
      depositedNanorewards: e[3],
      currentStakedTokens: e[4],
      accruedPerUnitNanorewards: e[5],
      claimedFeeNanorewards: e[6],
      accruedFeeNanorewards: e[7],
      accruedNanorewards: e[8],
      claimedNanorewards: e[9],
      contractUniqueId: e[10],
      nanorewardsPer24h: e[11],
      adminFee: e[12],
      minStakeTime: e[13],
      stakingTokenWallet: s(e[14]),
      rewardTokenWallet: s(e[15]),
      custodianAddress: a(e[16]),
      canChangeCustodian: r(e[17]),
      canSendRawMsg: r(e[18]),
      canChangeFee: r(e[19]),
      unrestrictedDepositRewards: r(e[20]),
      // NFTs are always soulbound in V2
      soulboundItems: !0
    };
  }
}
i.version = o.v2;
export {
  i as FarmNftMinterV2
};
//# sourceMappingURL=FarmNftMinterV2.js.map
