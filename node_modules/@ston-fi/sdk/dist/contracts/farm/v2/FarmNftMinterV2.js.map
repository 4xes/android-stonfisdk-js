{"version":3,"file":"FarmNftMinterV2.js","sources":["../../../../src/contracts/farm/v2/FarmNftMinterV2.ts"],"sourcesContent":["import TonWeb from \"tonweb\";\n\nimport type { BN, Cell } from \"@/types\";\nimport { parseAddress, parseAddressNotNull } from \"@/utils/parseAddress\";\nimport { parseBoolean } from \"@/utils/parseBoolean\";\nimport { parseString } from \"@/utils/parseString\";\n\nimport { FARM_VERSION } from \"../constants\";\nimport {\n  FarmNftMinterV1,\n  type FarmNftMinterV1Options,\n} from \"../v1/FarmNftMinterV1\";\n\nconst {\n  utils: { BN },\n} = TonWeb;\n\nexport interface FarmNftMinterV2Options extends FarmNftMinterV1Options {}\n\nexport class FarmNftMinterV2 extends FarmNftMinterV1 {\n  public static version = FARM_VERSION.v2;\n\n  /**\n   * @returns structure containing pending data\n   *\n   * @property {BN} changeCustodianTs - Timestamp when 'change_custodian' was initiated\n   * @property {BN} sendMsgTs - Timestamp when 'send_raw_msg' was initiated\n   * @property {BN} codeUpgradeTs - Timestamp when 'code_upgrade' was initiated\n   * @property {Address} newCustodian - New custodian that will be set after confirmation\n   * @property {Cell} pendingMsg - Pending msg that will be sends after confirmation\n   * @property {Cell} newCode - New contract code that will be set after confirmation\n   * @property {Cell} newStorage - New contract storage that will be set after confirmation\n   */\n  public async getPendingData() {\n    const contractAddress = await this.getAddress();\n\n    const result = await this.provider.call2(\n      contractAddress.toString(),\n      \"get_pending_data\",\n    );\n\n    return {\n      changeCustodianTs: result[0] as BN,\n      sendMsgTs: result[1] as BN,\n      codeUpgradeTs: result[2] as BN,\n      newCustodian: parseAddress(result[3]),\n      pendingMsg: result[4] as Cell,\n      newCode: result[5] as Cell,\n      newStorage: result[6] as Cell,\n    };\n  }\n\n  /**\n   * @returns structure containing version data\n   *\n   * @property {number} major - Major version; breaking changes in api\n   * @property {number} minor - Minor version; non-breaking new functionality\n   * @property {string} development - Development version; can contain breaking changes\n   */\n  public async getVersion() {\n    const contractAddress = await this.getAddress();\n\n    const result = await this.provider.call2(\n      contractAddress.toString(),\n      \"get_version\",\n    );\n\n    return {\n      major: (result[0] as BN).toNumber(),\n      minor: (result[1] as BN).toNumber(),\n      development: parseString(result[2]),\n    };\n  }\n\n  /**\n   * @returns structure containing current state of the minter\n   *\n   * @property {BN} nextItemIndex - Index of the next nft in this collection\n   * @property {BN} lastUpdateTime - Last time farming values were updated\n   * @property {number} status - Status of the contract: uninitialized `0`, active `1`, paused `3`\n   * @property {BN} depositedNanorewards - Deposited rewards in nanounits\n   * @property {BN} currentStakedTokens - Number of staked tokens in basic token units\n   * @property {BN} accruedPerUnitNanorewards - Number of accrued nanorewards per basic stake token unit\n   * @property {BN} claimedFeeNanorewards - Claimed fees\n   * @property {BN} accruedFeeNanorewards - Accrued fees\n   * @property {BN} accruedNanorewards - Total number of accrued rewards in nanounits\n   * @property {BN} claimedNanorewards - Number of claimed rewards in nanounits\n   * @property {BN} contractUniqueId - Minter id\n   * @property {BN} nanorewardsPer24h - Total number of accrued rewards per 24h in nanounits\n   * @property {BN} adminFee - Admin fee; divider is 10000\n   * @property {BN} minStakeTime - Minimum staking time\n   * @property {Address} stakingTokenWallet - Minter's staking jetton wallet\n   * @property {Address} rewardTokenWallet - Minter's reward jetton wallet\n   * @property {Address} custodianAddress - Custodian address\n   * @property {boolean} canChangeCustodian - If can change custodian\n   * @property {boolean} canSendRawMsg - If can send raw msg\n   * @property {boolean} canChangeFee - If can change fee\n   * @property {boolean} unrestrictedDepositRewards - If rewards can be deposited by anyone\n   * @property {boolean} soulboundItems - Whether minted NFTs are soulbound; Always true in V2\n   */\n  public override async getData() {\n    const contractAddress = await this.getAddress();\n\n    const result = await this.provider.call2(\n      contractAddress.toString(),\n      \"get_farming_minter_data\",\n    );\n\n    return {\n      nextItemIndex: result[0] as BN,\n      lastUpdateTime: result[1] as BN,\n      status: (result[2] as BN).toNumber(),\n      depositedNanorewards: result[3] as BN,\n      currentStakedTokens: result[4] as BN,\n      accruedPerUnitNanorewards: result[5] as BN,\n      claimedFeeNanorewards: result[6] as BN,\n      accruedFeeNanorewards: result[7] as BN,\n      accruedNanorewards: result[8] as BN,\n      claimedNanorewards: result[9] as BN,\n      contractUniqueId: result[10] as BN,\n      nanorewardsPer24h: result[11] as BN,\n      adminFee: result[12] as BN,\n      minStakeTime: result[13] as BN,\n      stakingTokenWallet: parseAddressNotNull(result[14]),\n      rewardTokenWallet: parseAddressNotNull(result[15]),\n      custodianAddress: parseAddress(result[16]),\n      canChangeCustodian: parseBoolean(result[17]),\n      canSendRawMsg: parseBoolean(result[18]),\n      canChangeFee: parseBoolean(result[19]),\n      unrestrictedDepositRewards: parseBoolean(result[20]),\n\n      // NFTs are always soulbound in V2\n      soulboundItems: true,\n    };\n  }\n}\n"],"names":["FarmNftMinterV2","FarmNftMinterV1","contractAddress","result","parseAddress","parseString","parseAddressNotNull","parseBoolean","FARM_VERSION"],"mappings":";;;;;;AAmBO,MAAMA,UAAwBC,EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcnD,MAAa,iBAAiB;AACtB,UAAAC,IAAkB,MAAM,KAAK,cAE7BC,IAAS,MAAM,KAAK,SAAS;AAAA,MACjCD,EAAgB,SAAS;AAAA,MACzB;AAAA,IAAA;AAGK,WAAA;AAAA,MACL,mBAAmBC,EAAO,CAAC;AAAA,MAC3B,WAAWA,EAAO,CAAC;AAAA,MACnB,eAAeA,EAAO,CAAC;AAAA,MACvB,cAAcC,EAAaD,EAAO,CAAC,CAAC;AAAA,MACpC,YAAYA,EAAO,CAAC;AAAA,MACpB,SAASA,EAAO,CAAC;AAAA,MACjB,YAAYA,EAAO,CAAC;AAAA,IAAA;AAAA,EAExB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,aAAa;AAClB,UAAAD,IAAkB,MAAM,KAAK,cAE7BC,IAAS,MAAM,KAAK,SAAS;AAAA,MACjCD,EAAgB,SAAS;AAAA,MACzB;AAAA,IAAA;AAGK,WAAA;AAAA,MACL,OAAQC,EAAO,CAAC,EAAS,SAAS;AAAA,MAClC,OAAQA,EAAO,CAAC,EAAS,SAAS;AAAA,MAClC,aAAaE,EAAYF,EAAO,CAAC,CAAC;AAAA,IAAA;AAAA,EAEtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BA,MAAsB,UAAU;AACxB,UAAAD,IAAkB,MAAM,KAAK,cAE7BC,IAAS,MAAM,KAAK,SAAS;AAAA,MACjCD,EAAgB,SAAS;AAAA,MACzB;AAAA,IAAA;AAGK,WAAA;AAAA,MACL,eAAeC,EAAO,CAAC;AAAA,MACvB,gBAAgBA,EAAO,CAAC;AAAA,MACxB,QAASA,EAAO,CAAC,EAAS,SAAS;AAAA,MACnC,sBAAsBA,EAAO,CAAC;AAAA,MAC9B,qBAAqBA,EAAO,CAAC;AAAA,MAC7B,2BAA2BA,EAAO,CAAC;AAAA,MACnC,uBAAuBA,EAAO,CAAC;AAAA,MAC/B,uBAAuBA,EAAO,CAAC;AAAA,MAC/B,oBAAoBA,EAAO,CAAC;AAAA,MAC5B,oBAAoBA,EAAO,CAAC;AAAA,MAC5B,kBAAkBA,EAAO,EAAE;AAAA,MAC3B,mBAAmBA,EAAO,EAAE;AAAA,MAC5B,UAAUA,EAAO,EAAE;AAAA,MACnB,cAAcA,EAAO,EAAE;AAAA,MACvB,oBAAoBG,EAAoBH,EAAO,EAAE,CAAC;AAAA,MAClD,mBAAmBG,EAAoBH,EAAO,EAAE,CAAC;AAAA,MACjD,kBAAkBC,EAAaD,EAAO,EAAE,CAAC;AAAA,MACzC,oBAAoBI,EAAaJ,EAAO,EAAE,CAAC;AAAA,MAC3C,eAAeI,EAAaJ,EAAO,EAAE,CAAC;AAAA,MACtC,cAAcI,EAAaJ,EAAO,EAAE,CAAC;AAAA,MACrC,4BAA4BI,EAAaJ,EAAO,EAAE,CAAC;AAAA;AAAA,MAGnD,gBAAgB;AAAA,IAAA;AAAA,EAEpB;AACF;AApHaH,EACG,UAAUQ,EAAa;"}