import { beginParse as g } from "./SliceAdapter.js";
function B(a) {
  let t = 0;
  for (; a.loadBit(); )
    t++;
  return t;
}
function d(a, t, i, l, r) {
  const p = t.loadBit() ? 1 : 0;
  let o = 0, n = a;
  if (p === 0) {
    o = B(t);
    for (let f = 0; f < o; f++)
      n += t.loadBit() ? "1" : "0";
  } else if ((t.loadBit() ? 1 : 0) === 0) {
    o = t.loadUint(Math.ceil(Math.log2(i + 1)));
    for (let e = 0; e < o; e++)
      n += t.loadBit() ? "1" : "0";
  } else {
    const e = t.loadBit() ? "1" : "0";
    o = t.loadUint(Math.ceil(Math.log2(i + 1)));
    for (let h = 0; h < o; h++)
      n += e;
  }
  if (i - o === 0)
    l.set(BigInt(`0b${n}`), r(t));
  else {
    const f = t.loadRef(), e = t.loadRef();
    f.isExotic || d(`${n}0`, g(f), i - o - 1, l, r), e.isExotic || d(
      `${n}1`,
      g(e),
      i - o - 1,
      l,
      r
    );
  }
}
function u(a, t, i) {
  const l = /* @__PURE__ */ new Map();
  return a && d("", a, t, l, i), l;
}
export {
  u as parseDict
};
//# sourceMappingURL=DeserializeDictionary.js.map
