{"version":3,"file":"parseAddress.cjs","sources":["../../src/utils/parseAddress.ts"],"sourcesContent":["import TonWeb from \"tonweb\";\n\nimport type { Address, Cell } from \"@/types\";\n\nconst { Address } = TonWeb;\n\nconst readIntFromBitString = (\n  bs: Cell[\"bits\"],\n  cursor: number,\n  bits: number,\n) => {\n  let n = BigInt(0);\n\n  for (let i = 0; i < bits; i++) {\n    n *= BigInt(2);\n    n += BigInt(bs.get(cursor + i));\n  }\n\n  return n;\n};\n\nexport const parseAddress = (cell: Cell): Address | null => {\n  try {\n    let n = readIntFromBitString(cell.bits, 3, 8);\n\n    if (n > BigInt(127)) {\n      n = n - BigInt(256);\n    }\n\n    const hashPart = readIntFromBitString(cell.bits, 3 + 8, 256);\n\n    if (`${n.toString(10)}:${hashPart.toString(16)}` === \"0:0\") {\n      return null;\n    }\n\n    const s = `${n.toString(10)}:${hashPart.toString(16).padStart(64, \"0\")}`;\n\n    return new Address(s);\n  } catch {\n    return null;\n  }\n};\n\nexport const parseAddressNotNull = (cell: Cell): Address => {\n  const address = parseAddress(cell);\n\n  if (!address) {\n    throw new Error(`Failed to parse address from cell: ${cell}`);\n  }\n\n  return address;\n};\n"],"names":["Address","TonWeb","readIntFromBitString","bs","cursor","bits","n","i","parseAddress","cell","hashPart","s","parseAddressNotNull","address"],"mappings":"0GAIM,CAAE,QAAAA,CAAY,EAAAC,EAEdC,EAAuB,CAC3BC,EACAC,EACAC,IACG,CACC,IAAAC,EAAI,OAAO,CAAC,EAEhB,QAASC,EAAI,EAAGA,EAAIF,EAAME,IACxBD,GAAK,OAAO,CAAC,EACbA,GAAK,OAAOH,EAAG,IAAIC,EAASG,CAAC,CAAC,EAGzB,OAAAD,CACT,EAEaE,EAAgBC,GAA+B,CACtD,GAAA,CACF,IAAIH,EAAIJ,EAAqBO,EAAK,KAAM,EAAG,CAAC,EAExCH,EAAI,OAAO,GAAG,IACZA,EAAAA,EAAI,OAAO,GAAG,GAGpB,MAAMI,EAAWR,EAAqBO,EAAK,KAAM,EAAI,EAAG,GAAG,EAEvD,GAAA,GAAGH,EAAE,SAAS,EAAE,CAAC,IAAII,EAAS,SAAS,EAAE,CAAC,IAAO,MAC5C,OAAA,KAGT,MAAMC,EAAI,GAAGL,EAAE,SAAS,EAAE,CAAC,IAAII,EAAS,SAAS,EAAE,EAAE,SAAS,GAAI,GAAG,CAAC,GAE/D,OAAA,IAAIV,EAAQW,CAAC,CAAA,MACd,CACC,OAAA,IACT,CACF,EAEaC,EAAuBH,GAAwB,CACpD,MAAAI,EAAUL,EAAaC,CAAI,EAEjC,GAAI,CAACI,EACH,MAAM,IAAI,MAAM,sCAAsCJ,CAAI,EAAE,EAGvD,OAAAI,CACT"}